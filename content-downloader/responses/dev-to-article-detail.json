{
  "type_of": "article",
  "id": 1423051,
  "title": "The Hitchhiker's Guide to Byte-to-Text Encoding",
  "description": "Either for debugging, data serialization, cryptography or ID generation, bytes-to-text encoding is an...",
  "readable_publish_date": "Apr 2",
  "slug": "the-hitchhikers-guide-to-byte-to-text-encoding-2cm4",
  "path": "/favr/the-hitchhikers-guide-to-byte-to-text-encoding-2cm4",
  "url": "https://dev.to/favr/the-hitchhikers-guide-to-byte-to-text-encoding-2cm4",
  "comments_count": 0,
  "public_reactions_count": 0,
  "collection_id": null,
  "published_timestamp": "2023-04-02T02:55:04Z",
  "positive_reactions_count": 0,
  "cover_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--XyFa-SQh--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rspd0ydnh2pslfbshmag.png",
  "social_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--dhbPK3HD--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rspd0ydnh2pslfbshmag.png",
  "canonical_url": "https://dev.to/favr/the-hitchhikers-guide-to-byte-to-text-encoding-2cm4",
  "created_at": "2023-04-02T02:12:20Z",
  "edited_at": null,
  "crossposted_at": null,
  "published_at": "2023-04-02T02:55:04Z",
  "last_comment_at": "2023-04-02T02:55:04Z",
  "reading_time_minutes": 7,
  "tag_list": "encoding, hex, base64, binary",
  "tags": [
    "encoding",
    "hex",
    "base64",
    "binary"
  ],
  "body_html": "<p>Either for debugging, data serialization, cryptography or ID generation, bytes-to-text encoding is an important tool for most developers. Either you currently want to select a specific one or just want to generally understand the basic properties of each, this article will provide you an overview.</p>\n\n<p>One thing all of these encodings have in common, is that they require more space than the underlying bit-data. How much<br>\ndepends on the encoding and the size of its alphabet. Another important property is \"human-readability\", so if you want<br>\nto understand the underlying value at a glance, it will be way easier with a hex encoding than base64. Also don't forget<br>\npadding, required if a single character does not exactly represent 2, 4 or 8 bits, which makes the output length variable.<br>\nFinally, you need to consider how readily available implementations of the chosen encoding is, especially if you want to <br>\nsend the data to different system using different tech stacks.</p>\n\n<h2>\n  <a name=\"binary\" href=\"#binary\">\n  </a>\n  Binary\n</h2>\n\n<p>Binary, also known as base-2 encoding, is the simplest and most fundamental byte-to-text encoding. It represents data using only two symbols: 0 and 1. Each digit in a binary number corresponds to a bit. In binary encoding, each byte (consisting of 8 bits) is directly translated into a sequence of eight 0s and 1s.</p>\n\n<p>Binary encoding is best suited for situations where readability is not a primary concern, such as number encoding and debugging purposes. Although it is not widely used for general text encoding due to its verbosity, binary remains an essential building block in understanding more complex byte-to-text encoding schemes.</p>\n\n<div class=\"table-wrapper-paragraph\"><table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Efficiency</td>\n<td>12.5 % (1 bit/char), 1 bit segments</td>\n</tr>\n<tr>\n<td>32/64/128 bit</td>\n<td>1-32/1-64/1-128 chars</td>\n</tr>\n<tr>\n<td>Padding</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Const. Out. Len.</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Suited for</td>\n<td>number encoding, debugging</td>\n</tr>\n<tr>\n<td>Alphabet</td>\n<td><code>01</code></td>\n</tr>\n<tr>\n<td>Known Usages</td>\n<td>none</td>\n</tr>\n<tr>\n<td>Standardization</td>\n<td>none</td>\n</tr>\n<tr>\n<td>Popularity</td>\n<td>implementations: common, usage: not common</td>\n</tr>\n<tr>\n<td>Example</td>\n<td><code>11010011 01111000 01101100 10010011 01111110 01111111 00111000</code></td>\n</tr>\n</tbody>\n</table></div>\n\n<p>References: <a href=\"https://en.wikipedia.org/wiki/Binary_number\">Wikipedia</a></p>\n\n<h2>\n  <a name=\"octal\" href=\"#octal\">\n  </a>\n  Octal\n</h2>\n\n<p>Octal, or base-8 encoding, represents data using eight distinct symbols: 0 through 7. In octal encoding, each byte (8 bits) is divided into three groups of 3 bits each, and each group is then converted into a single octal digit.</p>\n\n<p>Octal encoding is particularly well-suited for number encoding applications, such as the Unix chmod command, which uses octal notation to represent file permissions. While not as prevalent as some other byte-to-text encodings, octal remains a useful and compact representation for certain use cases, especially in contexts where base-8 arithmetic is more convenient or intuitive.</p>\n\n<div class=\"table-wrapper-paragraph\"><table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Efficiency</td>\n<td>37.5 % (3 bit/char), 24 bit segments</td>\n</tr>\n<tr>\n<td>32/64/128 bit</td>\n<td>1-11/1-22/1-43 chars</td>\n</tr>\n<tr>\n<td>Padding</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Const. Out. Len.</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Suited for</td>\n<td>number encoding</td>\n</tr>\n<tr>\n<td>Alphabet</td>\n<td><code>01234567</code></td>\n</tr>\n<tr>\n<td>Known Usages</td>\n<td>chmod</td>\n</tr>\n<tr>\n<td>Popularity</td>\n<td>implementations: common, usage: not common</td>\n</tr>\n<tr>\n<td>Standardization</td>\n<td>none</td>\n</tr>\n<tr>\n<td>Example</td>\n<td><code>703767722333074323</code></td>\n</tr>\n</tbody>\n</table></div>\n\n<p>References: <a href=\"https://en.wikipedia.org/wiki/Octal\">Wikipedia</a></p>\n\n<h2>\n  <a name=\"decimal\" href=\"#decimal\">\n  </a>\n  Decimal\n</h2>\n\n<p>Decimal, or base-10 encoding, represents data using ten distinct symbols: 0 through 9. This encoding scheme is based on the familiar decimal numeral system and is widely used in everyday life. In decimal encoding, bytes are treated as integer values and then converted to their corresponding decimal representation.</p>\n\n<p>Decimal encoding is particularly suited for number encoding and single-byte representation applications. Due to its familiarity and ease of understanding, decimal encoding is often employed in contexts where readability is important, and the data being represented consists primarily of numerical values.</p>\n\n<div class=\"table-wrapper-paragraph\"><table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Efficiency</td>\n<td>41.5 % (3.32 bit/char)</td>\n</tr>\n<tr>\n<td>32/64/128 bit</td>\n<td>1-10/1-20/1-39 chars</td>\n</tr>\n<tr>\n<td>Padding</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Const. Out. Len.</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Suited for</td>\n<td>number encoding</td>\n</tr>\n<tr>\n<td>Alphabet</td>\n<td><code>0123456789</code></td>\n</tr>\n<tr>\n<td>Known Usages</td>\n<td>single byte representations</td>\n</tr>\n<tr>\n<td>Popularity</td>\n<td>implementations: common, usage: not common</td>\n</tr>\n<tr>\n<td>Standardization</td>\n<td>none</td>\n</tr>\n<tr>\n<td>Example</td>\n<td><code>15902780311763155</code></td>\n</tr>\n</tbody>\n</table></div>\n\n<h2>\n  <a name=\"hex\" href=\"#hex\">\n  </a>\n  Hex\n</h2>\n\n<p>Hexadecimal, often abbreviated as \"hex\" or referred to as base-16 encoding, is a widely used byte-to-text encoding method that represents data using sixteen distinct symbols: 0-9 for the digits 0 through 9, and A-F (or a-f) for the digits 10 through 15. In hex encoding, each byte (8 bits) is divided into two groups of 4 bits each, with each group being converted into a single hex digit.</p>\n\n<p>Hexadecimal encoding is particularly suited for number and byte-string encoding applications. It is widely used in various contexts, such as UUIDs, cryptographic keys, and color codes in web design, among others. Hex encoding has been standardized by RFC 4648, which provides guidelines on how this encoding method should be used and implemented in various applications.</p>\n\n<div class=\"table-wrapper-paragraph\"><table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Efficiency</td>\n<td>50 % (4 bit/char), 8 bit segments</td>\n</tr>\n<tr>\n<td>32/64/128 bit</td>\n<td>8/16/32 chars</td>\n</tr>\n<tr>\n<td>Padding</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Const. Out. Len.</td>\n<td>true</td>\n</tr>\n<tr>\n<td>Suited for</td>\n<td>number &amp; byte-string encoding</td>\n</tr>\n<tr>\n<td>Alphabet</td>\n<td><code>0123456789abcdef</code></td>\n</tr>\n<tr>\n<td>Known Usages</td>\n<td>UUIDs, color codes, cryptographic keys, ...</td>\n</tr>\n<tr>\n<td>Popularity</td>\n<td>implementations: very common, usage: very common</td>\n</tr>\n<tr>\n<td>Standardization</td>\n<td><a href=\"https://www.rfc-editor.org/rfc/rfc4648\">RFC 4648</a></td>\n</tr>\n<tr>\n<td>Example</td>\n<td><code>387f7e936c78d3</code></td>\n</tr>\n</tbody>\n</table></div>\n\n<p>References: <a href=\"https://en.wikipedia.org/wiki/Hexadecimal\">Wikipedia</a></p>\n\n<h2>\n  <a name=\"base26\" href=\"#base26\">\n  </a>\n  Base26\n</h2>\n\n<p>Base26 encoding, also known as alphabetic encoding, represents data using the 26 letters of the English alphabet (A-Z). In base26 encoding, each byte is treated as an integer value and is converted into one or more alphabetic characters using a base conversion algorithm.</p>\n\n<p>Base26 encoding is particularly suited for number encoding applications and may be useful in scenarios where the encoding output should only contain alphabetic characters. However, it is not widely adopted, and there are no known standardizations or specific use cases for this encoding method.</p>\n\n<div class=\"table-wrapper-paragraph\"><table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Efficiency</td>\n<td>58.8 % (4.70 bit/char)</td>\n</tr>\n<tr>\n<td>32/64/128 bit</td>\n<td>7/14/28 chars</td>\n</tr>\n<tr>\n<td>Padding</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Const. Out. Len.</td>\n<td>true</td>\n</tr>\n<tr>\n<td>Suited for</td>\n<td>byte-string encoding</td>\n</tr>\n<tr>\n<td>Alphabet</td>\n<td><code>ABCDEFGHIJKLMNOPQRSTUVWXYZ</code></td>\n</tr>\n<tr>\n<td>Known Usages</td>\n<td>none</td>\n</tr>\n<tr>\n<td>Popularity</td>\n<td>implementations: not common, usage: not common</td>\n</tr>\n<tr>\n<td>Standardization</td>\n<td>none</td>\n</tr>\n<tr>\n<td>Example</td>\n<td><code>EIQYWQEAJRFF</code></td>\n</tr>\n</tbody>\n</table></div>\n\n<p>References: <a href=\"https://en.wikipedia.org/wiki/List_of_numeral_systems#By_type_of_notation\">Wikipedia</a></p>\n\n<h2>\n  <a name=\"base32\" href=\"#base32\">\n  </a>\n  Base32\n</h2>\n\n<p>Base32 represents data using a set of 32 distinct characters, typically consisting of uppercase letters A-Z and digits 2-7. This encoding scheme is designed to be more human-readable and resistant to errors when compared to other schemes like base64, while still offering a relatively compact representation of data.</p>\n\n<p>This encoding method is particularly well-suited for scenarios where data needs to be case-insensitive, easy to read, or less prone to transcription errors. Base32 has been standardized by RFC 4648 but has several variations.</p>\n\n<div class=\"table-wrapper-paragraph\"><table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Efficiency</td>\n<td>62.5 % (5 bit/char), 40 bit segments</td>\n</tr>\n<tr>\n<td>32/64/128 bit</td>\n<td>7+1/13+3/26+6 chars (+padding)</td>\n</tr>\n<tr>\n<td>Padding</td>\n<td>true</td>\n</tr>\n<tr>\n<td>Const. Out. Len.</td>\n<td>true</td>\n</tr>\n<tr>\n<td>Suited for</td>\n<td>byte-string encoding</td>\n</tr>\n<tr>\n<td>Alphabet</td>\n<td><code>ABCDEFGHIJKLMNOPQRSTUVWXYZ234567</code></td>\n</tr>\n<tr>\n<td>Known Usages</td>\n<td>none</td>\n</tr>\n<tr>\n<td>Popularity</td>\n<td>implementations: common, usage: not common</td>\n</tr>\n<tr>\n<td>Standardization</td>\n<td><a href=\"https://datatracker.ietf.org/doc/html/rfc4648\">RFC 4648</a></td>\n</tr>\n<tr>\n<td>Variations</td>\n<td>z-base-32, Crockford's Base32, base32hex, Geohash</td>\n</tr>\n<tr>\n<td>Example</td>\n<td><code>HB7X5E3MPDJQ</code></td>\n</tr>\n</tbody>\n</table></div>\n\n<p>References: <a href=\"https://en.wikipedia.org/wiki/Base32\">Wikipedia</a></p>\n\n<h2>\n  <a name=\"base36\" href=\"#base36\">\n  </a>\n  Base36\n</h2>\n\n<p>Base36 represents data using a set of 36 distinct characters, consisting of both the 26 lowercase letters of the English alphabet (a-z) and the 10 Arabic numerals (0-9). This encoding scheme aims to provide a more compact and human-readable representation of data while still offering a balance between efficiency and readability.</p>\n\n<p>Base36 encoding is particularly suited for applications that involve encoding large integers, such as unique identifiers or URL slugs. One of its known use cases is in Reddit URL slugs. However, base36 encoding is not standardized and may not be suitable for all applications.</p>\n\n<div class=\"table-wrapper-paragraph\"><table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Efficiency</td>\n<td>64.6 % (5.17 bit/char)</td>\n</tr>\n<tr>\n<td>32/64/128 bit</td>\n<td>1-7/1-13/1-25 chars</td>\n</tr>\n<tr>\n<td>Padding</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Const. Out. Len.</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Suited for</td>\n<td>big integer encoding</td>\n</tr>\n<tr>\n<td>Alphabet</td>\n<td><code>0123456789abcdefghijklmnopqrstuvwxyz</code></td>\n</tr>\n<tr>\n<td>Known Usages</td>\n<td>Reddit Url Slugs</td>\n</tr>\n<tr>\n<td>Popularity</td>\n<td>implementations: common, usage: not common</td>\n</tr>\n<tr>\n<td>Standardization</td>\n<td>none</td>\n</tr>\n<tr>\n<td>Example</td>\n<td><code>4cl2cf404wj</code></td>\n</tr>\n</tbody>\n</table></div>\n\n<p>References: <a href=\"https://en.wikipedia.org/wiki/Base36\">Wikipedia</a></p>\n\n<h2>\n  <a name=\"base58\" href=\"#base58\">\n  </a>\n  Base58\n</h2>\n\n<p>Base58 encoding represents data using a set of 58 distinct characters, consisting of uppercase letters A-Z, lowercase letters a-z, and the digits 1-9, excluding visually similar characters such as '0', 'O', 'I', and 'l'. This encoding scheme aims to provide a compact and human-readable representation of data while minimizing the risk of transcription errors.</p>\n\n<p>While base58 encoding is not standardized, it has gained popularity in the cryptocurrency and distributed systems communities.</p>\n\n<div class=\"table-wrapper-paragraph\"><table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Efficiency</td>\n<td>73.2 % (5.86 bit/char)</td>\n</tr>\n<tr>\n<td>32/64/128 bit</td>\n<td>6/11/22 chars</td>\n</tr>\n<tr>\n<td>Padding</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Const. Out. Len.</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Suited for</td>\n<td>big integer encoding</td>\n</tr>\n<tr>\n<td>Alphabet</td>\n<td><code>123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz</code></td>\n</tr>\n<tr>\n<td>Known Usages</td>\n<td>\n<a href=\"https://en.bitcoin.it/wiki/Protocol_documentation#Addresses\">Bitcoin</a>, IFPS</td>\n</tr>\n<tr>\n<td>Popularity</td>\n<td>implementations: not common, usage: not common</td>\n</tr>\n<tr>\n<td>Standardization</td>\n<td>none</td>\n</tr>\n<tr>\n<td>Variations</td>\n<td>flicker short-urls</td>\n</tr>\n<tr>\n<td>Example</td>\n<td><code>39BQ5CdzFL</code></td>\n</tr>\n</tbody>\n</table></div>\n\n<p>References: <a href=\"https://en.wikipedia.org/wiki/Binary-to-text_encoding#Base58\">Wikipedia</a></p>\n\n<h2>\n  <a name=\"base64\" href=\"#base64\">\n  </a>\n  Base64\n</h2>\n\n<p>Base64 encoding is a widely used byte-to-text encoding method that represents binary data as a string of ASCII characters. It utilizes a set of 64 distinct characters, which includes uppercase letters A-Z, lowercase letters a-z, digits 0-9, and two additional characters, typically '+' and '/' (or '-' and '_' for the URL-safe variant). This encoding scheme aims to provide a compact and universally compatible representation of data, allowing it to be safely transmitted or embedded in various environments.</p>\n\n<p>Base64 encoding is particularly suited for applications that involve encoding byte strings, such as embedding images in HTML or transmitting binary data over text-based protocols like email. It is standardized in RFC 4648, with various variations defined in other RFCs, making it a widely recognized and supported encoding method across different platforms and programming languages.</p>\n\n<div class=\"table-wrapper-paragraph\"><table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Efficiency</td>\n<td>75 % (6 bit/char), 24 bit segments</td>\n</tr>\n<tr>\n<td>32/64/128 bit</td>\n<td>6+2/11+1/22+2 chars (+padding)</td>\n</tr>\n<tr>\n<td>Padding</td>\n<td>true</td>\n</tr>\n<tr>\n<td>Const. Out. Len.</td>\n<td>true</td>\n</tr>\n<tr>\n<td>Suited for</td>\n<td>byte-string encoding</td>\n</tr>\n<tr>\n<td>Alphabet</td>\n<td><code>ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/</code></td>\n</tr>\n<tr>\n<td>(url-safe)</td>\n<td><code>ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_</code></td>\n</tr>\n<tr>\n<td>Known Usages</td>\n<td>practically everywhere</td>\n</tr>\n<tr>\n<td>Popularity</td>\n<td>implementations: not common, usage: not common</td>\n</tr>\n<tr>\n<td>Standardization</td>\n<td>\n<a href=\"https://www.rfc-editor.org/rfc/rfc4648\">RFC 4648</a> (previously RFC 3548)</td>\n</tr>\n<tr>\n<td>Variations</td>\n<td>RFC 4880, RFC 1421, RFC 2152, RFC 3501, bcrypt radix64</td>\n</tr>\n<tr>\n<td>Example</td>\n<td><code>OH9-k2x40w</code></td>\n</tr>\n<tr>\n<td></td>\n<td>\n<code>OH9+k2x40w</code> (url-safe)</td>\n</tr>\n</tbody>\n</table></div>\n\n<p>References: <a href=\"https://en.wikipedia.org/wiki/Base64\">Wikipedia</a></p>\n\n<h2>\n  <a name=\"ascii85\" href=\"#ascii85\">\n  </a>\n  Ascii85\n</h2>\n\n<p>Ascii85, also known as Base85 encoding, uses a set of 85 distinct characters, which include all printable ASCII characters (except for whitespace) and an additional four characters that are used for padding and delimiting.</p>\n\n<p>Ascii85 encoding is often used in environments where binary data needs to be represented in a compact, ASCII-friendly format.</p>\n\n<div class=\"table-wrapper-paragraph\"><table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Efficiency</td>\n<td>80.1 % (6.41 bit/char)</td>\n</tr>\n<tr>\n<td>32/64/128 bit</td>\n<td>1-5/2-10/4-20 chars</td>\n</tr>\n<tr>\n<td>Padding</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Const. Out. Len.</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Suited for</td>\n<td>byte-string encoding</td>\n</tr>\n<tr>\n<td>Alphabet</td>\n<td><code>123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz</code></td>\n</tr>\n<tr>\n<td>Known Usages</td>\n<td>Git, IPv6, Adobe PDF and PostScript</td>\n</tr>\n<tr>\n<td>Popularity</td>\n<td>implementations: not common, usage: not common</td>\n</tr>\n<tr>\n<td>Variations</td>\n<td>ZeroMQ, ZMODEM, btoa, <a href=\"https://web.archive.org/web/20161222092741/https://www.adobe.com/products/postscript/pdfs/PLRM.pdf\">Adobe</a>, <a href=\"https://datatracker.ietf.org/doc/html/rfc1924\">RFC 1924</a>\n</td>\n</tr>\n<tr>\n<td>Example</td>\n<td><code>3.HC@Cj=D</code></td>\n</tr>\n</tbody>\n</table></div>\n\n<p>References: <a href=\"https://en.wikipedia.org/wiki/Ascii85\">Wikipedia</a></p>\n\n<h2>\n  <a name=\"base122\" href=\"#base122\">\n  </a>\n  Base122\n</h2>\n\n<p>Base122 is an experimental encoding that facilitates printable and non-printable characters to maximize space efficiency. Base-122 can be used in any context of binary-to-text embedding where the text encoding is UTF-8.</p>\n\n<div class=\"table-wrapper-paragraph\"><table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Efficiency</td>\n<td>86.6 % (6.93 bit/char)</td>\n</tr>\n<tr>\n<td>32/64/128 bit</td>\n<td>?</td>\n</tr>\n<tr>\n<td>Padding</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Const. Out. Len.</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Suited for</td>\n<td>embedding blobs in HTML (experimental)</td>\n</tr>\n<tr>\n<td>Alphabet</td>\n<td>full 7bit minus some reserved chars (UTF-8 compatible)</td>\n</tr>\n<tr>\n<td>Known Usages</td>\n<td>none</td>\n</tr>\n<tr>\n<td>Popularity</td>\n<td>implementations: not common, usage: not common</td>\n</tr>\n<tr>\n<td>Example</td>\n<td>\n<code>��v�~�</code> (non-printable characters, might not render correctly)</td>\n</tr>\n</tbody>\n</table></div>\n\n<p>References: <a href=\"https://github.com/kevinAlbs/Base122\">kevinalbs.com</a>, <a href=\"https://github.com/kevinAlbs/Base122\">js reference implementation</a></p>\n\n",
  "body_markdown": "Either for debugging, data serialization, cryptography or ID generation, bytes-to-text encoding is an important tool for most developers. Either you currently want to select a specific one or just want to generally understand the basic properties of each, this article will provide you an overview.\n\nOne thing all of these encodings have in common, is that they require more space than the underlying bit-data. How much\ndepends on the encoding and the size of its alphabet. Another important property is \"human-readability\", so if you want\nto understand the underlying value at a glance, it will be way easier with a hex encoding than base64. Also don't forget\npadding, required if a single character does not exactly represent 2, 4 or 8 bits, which makes the output length variable.\nFinally, you need to consider how readily available implementations of the chosen encoding is, especially if you want to \nsend the data to different system using different tech stacks.\n\n## Binary\n\nBinary, also known as base-2 encoding, is the simplest and most fundamental byte-to-text encoding. It represents data using only two symbols: 0 and 1. Each digit in a binary number corresponds to a bit. In binary encoding, each byte (consisting of 8 bits) is directly translated into a sequence of eight 0s and 1s.\n\nBinary encoding is best suited for situations where readability is not a primary concern, such as number encoding and debugging purposes. Although it is not widely used for general text encoding due to its verbosity, binary remains an essential building block in understanding more complex byte-to-text encoding schemes.\n\n| Property         | Value                                                            |\n|------------------|------------------------------------------------------------------|\n| Efficiency       | 12.5 % (1 bit/char), 1 bit segments                              |\n| 32/64/128 bit    | 1-32/1-64/1-128 chars                                            |\n| Padding          | false                                                            |\n| Const. Out. Len. | false                                                            |\n| Suited for       | number encoding, debugging                                       |\n| Alphabet         | `01`                                                             |\n| Known Usages     | none                                                             |\n| Standardization  | none                                                             |\n| Popularity       | implementations: common, usage: not common                       |\n| Example          | `11010011 01111000 01101100 10010011 01111110 01111111 00111000` |\n\nReferences: [Wikipedia](https://en.wikipedia.org/wiki/Binary_number)\n\n## Octal\n\nOctal, or base-8 encoding, represents data using eight distinct symbols: 0 through 7. In octal encoding, each byte (8 bits) is divided into three groups of 3 bits each, and each group is then converted into a single octal digit.\n\nOctal encoding is particularly well-suited for number encoding applications, such as the Unix chmod command, which uses octal notation to represent file permissions. While not as prevalent as some other byte-to-text encodings, octal remains a useful and compact representation for certain use cases, especially in contexts where base-8 arithmetic is more convenient or intuitive.\n\n\n| Property         | Value                                      |\n|------------------|--------------------------------------------|\n| Efficiency       | 37.5 % (3 bit/char), 24 bit segments       |\n| 32/64/128 bit    | 1-11/1-22/1-43 chars                       |\n| Padding          | false                                      |\n| Const. Out. Len. | false                                      |\n| Suited for       | number encoding                            |\n| Alphabet         | `01234567`                                 |\n| Known Usages     | chmod                                      |\n| Popularity       | implementations: common, usage: not common |\n| Standardization  | none                                       |\n| Example          | `703767722333074323`                       |\n\nReferences: [Wikipedia](https://en.wikipedia.org/wiki/Octal)\n\n## Decimal\n\nDecimal, or base-10 encoding, represents data using ten distinct symbols: 0 through 9. This encoding scheme is based on the familiar decimal numeral system and is widely used in everyday life. In decimal encoding, bytes are treated as integer values and then converted to their corresponding decimal representation.\n\nDecimal encoding is particularly suited for number encoding and single-byte representation applications. Due to its familiarity and ease of understanding, decimal encoding is often employed in contexts where readability is important, and the data being represented consists primarily of numerical values.\n\n| Property         | Value                                       |\n|------------------|---------------------------------------------|\n| Efficiency       | 41.5 % (3.32 bit/char)                      |\n| 32/64/128 bit    | 1-10/1-20/1-39 chars                        |\n| Padding          | false                                       |\n| Const. Out. Len. | false                                       |\n| Suited for       | number encoding                             |\n| Alphabet         | `0123456789`                                |\n| Known Usages     | single byte representations                 |\n| Popularity       | implementations: common, usage: not common  |\n| Standardization  | none                                        |\n| Example          | `15902780311763155`                         |\n\n## Hex\n\nHexadecimal, often abbreviated as \"hex\" or referred to as base-16 encoding, is a widely used byte-to-text encoding method that represents data using sixteen distinct symbols: 0-9 for the digits 0 through 9, and A-F (or a-f) for the digits 10 through 15. In hex encoding, each byte (8 bits) is divided into two groups of 4 bits each, with each group being converted into a single hex digit.\n\nHexadecimal encoding is particularly suited for number and byte-string encoding applications. It is widely used in various contexts, such as UUIDs, cryptographic keys, and color codes in web design, among others. Hex encoding has been standardized by RFC 4648, which provides guidelines on how this encoding method should be used and implemented in various applications.\n\n| Property         | Value                                            |\n|------------------|--------------------------------------------------|\n| Efficiency       | 50 % (4 bit/char), 8 bit segments                |\n| 32/64/128 bit    | 8/16/32 chars                                    |\n| Padding          | false                                            |\n| Const. Out. Len. | true                                             |\n| Suited for       | number & byte-string encoding                    |\n| Alphabet         | `0123456789abcdef`                               |\n| Known Usages     | UUIDs, color codes, cryptographic keys, ...                   |\n| Popularity       | implementations: very common, usage: very common |\n| Standardization  | [RFC 4648](https://www.rfc-editor.org/rfc/rfc4648)                                         |\n| Example          | `387f7e936c78d3`                                 |\n\nReferences: [Wikipedia](https://en.wikipedia.org/wiki/Hexadecimal)\n\n## Base26\n\nBase26 encoding, also known as alphabetic encoding, represents data using the 26 letters of the English alphabet (A-Z). In base26 encoding, each byte is treated as an integer value and is converted into one or more alphabetic characters using a base conversion algorithm.\n\nBase26 encoding is particularly suited for number encoding applications and may be useful in scenarios where the encoding output should only contain alphabetic characters. However, it is not widely adopted, and there are no known standardizations or specific use cases for this encoding method.\n\n| Property         | Value                                          |\n|------------------|------------------------------------------------|\n| Efficiency       | 58.8 % (4.70 bit/char)                         |\n| 32/64/128 bit    | 7/14/28 chars                                  |\n| Padding          | false                                          |\n| Const. Out. Len. | true                                           |\n| Suited for       | byte-string encoding                           |\n| Alphabet         | `ABCDEFGHIJKLMNOPQRSTUVWXYZ`                   |\n| Known Usages     | none                                           |\n| Popularity       | implementations: not common, usage: not common |\n| Standardization  | none                                           |\n| Example          | `EIQYWQEAJRFF`                                 |\n\nReferences: [Wikipedia](https://en.wikipedia.org/wiki/List_of_numeral_systems#By_type_of_notation)\n\n## Base32\n\nBase32 represents data using a set of 32 distinct characters, typically consisting of uppercase letters A-Z and digits 2-7. This encoding scheme is designed to be more human-readable and resistant to errors when compared to other schemes like base64, while still offering a relatively compact representation of data.\n\nThis encoding method is particularly well-suited for scenarios where data needs to be case-insensitive, easy to read, or less prone to transcription errors. Base32 has been standardized by RFC 4648 but has several variations.\n\n| Property         | Value                                             |\n|------------------|---------------------------------------------------|\n| Efficiency       | 62.5 % (5 bit/char), 40 bit segments              |\n| 32/64/128 bit    | 7+1/13+3/26+6 chars (+padding)                    |\n| Padding          | true                                              |\n| Const. Out. Len. | true                                              |\n| Suited for       | byte-string encoding                              |\n| Alphabet         | `ABCDEFGHIJKLMNOPQRSTUVWXYZ234567`                |\n| Known Usages     | none                                              |\n| Popularity       | implementations: common, usage: not common        |\n| Standardization  | [RFC 4648](https://datatracker.ietf.org/doc/html/rfc4648)                                          |\n| Variations       | z-base-32, Crockford's Base32, base32hex, Geohash |\n| Example          | `HB7X5E3MPDJQ`                                    |\n\nReferences: [Wikipedia](https://en.wikipedia.org/wiki/Base32)\n\n## Base36\n\nBase36 represents data using a set of 36 distinct characters, consisting of both the 26 lowercase letters of the English alphabet (a-z) and the 10 Arabic numerals (0-9). This encoding scheme aims to provide a more compact and human-readable representation of data while still offering a balance between efficiency and readability.\n\nBase36 encoding is particularly suited for applications that involve encoding large integers, such as unique identifiers or URL slugs. One of its known use cases is in Reddit URL slugs. However, base36 encoding is not standardized and may not be suitable for all applications.\n\n\n| Property         | Value                                      |\n|------------------|--------------------------------------------|\n| Efficiency       | 64.6 % (5.17 bit/char)                     |\n| 32/64/128 bit    | 1-7/1-13/1-25 chars                        |\n| Padding          | false                                      |\n| Const. Out. Len. | false                                      |\n| Suited for       | big integer encoding                       |\n| Alphabet         | `0123456789abcdefghijklmnopqrstuvwxyz`     |\n| Known Usages     | Reddit Url Slugs                           |\n| Popularity       | implementations: common, usage: not common |\n| Standardization  | none                                       |\n| Example          | `4cl2cf404wj`                              |\n\nReferences: [Wikipedia](https://en.wikipedia.org/wiki/Base36)\n\n## Base58\n\nBase58 encoding represents data using a set of 58 distinct characters, consisting of uppercase letters A-Z, lowercase letters a-z, and the digits 1-9, excluding visually similar characters such as '0', 'O', 'I', and 'l'. This encoding scheme aims to provide a compact and human-readable representation of data while minimizing the risk of transcription errors.\n\nWhile base58 encoding is not standardized, it has gained popularity in the cryptocurrency and distributed systems communities.\n\n| Property         | Value                                                        |\n|------------------|--------------------------------------------------------------|\n| Efficiency       | 73.2 % (5.86 bit/char)                                       |\n| 32/64/128 bit    | 6/11/22 chars                                                |\n| Padding          | false                                                        |\n| Const. Out. Len. | false                                                        |\n| Suited for       | big integer encoding                                         |\n| Alphabet         | `123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz` |\n| Known Usages     | [Bitcoin](https://en.bitcoin.it/wiki/Protocol_documentation#Addresses), IFPS                                                |\n| Popularity       | implementations: not common, usage: not common               |\n| Standardization  | none                                                         |\n| Variations       | flicker short-urls                                           |\n| Example          | `39BQ5CdzFL`                                                 |\n\nReferences: [Wikipedia](https://en.wikipedia.org/wiki/Binary-to-text_encoding#Base58)\n\n## Base64\n\nBase64 encoding is a widely used byte-to-text encoding method that represents binary data as a string of ASCII characters. It utilizes a set of 64 distinct characters, which includes uppercase letters A-Z, lowercase letters a-z, digits 0-9, and two additional characters, typically '+' and '/' (or '-' and '_' for the URL-safe variant). This encoding scheme aims to provide a compact and universally compatible representation of data, allowing it to be safely transmitted or embedded in various environments.\n\nBase64 encoding is particularly suited for applications that involve encoding byte strings, such as embedding images in HTML or transmitting binary data over text-based protocols like email. It is standardized in RFC 4648, with various variations defined in other RFCs, making it a widely recognized and supported encoding method across different platforms and programming languages.\n\n| Property         | Value                                                              |\n|------------------|--------------------------------------------------------------------|\n| Efficiency       | 75 % (6 bit/char), 24 bit segments                                 |\n| 32/64/128 bit    | 6+2/11+1/22+2 chars (+padding)                                     |\n| Padding          | true                                                               |\n| Const. Out. Len. | true                                                               |\n| Suited for       | byte-string encoding                                               |\n| Alphabet         | `ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/` |\n| (url-safe)       | `ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_` |\n| Known Usages     | practically everywhere                                             |\n| Popularity       | implementations: not common, usage: not common                     |\n| Standardization  | [RFC 4648](https://www.rfc-editor.org/rfc/rfc4648) (previously RFC 3548)                                     |\n| Variations       | RFC 4880, RFC 1421, RFC 2152, RFC 3501, bcrypt radix64             |\n| Example          | `OH9-k2x40w`                                                       |\n|                  | `OH9+k2x40w` (url-safe)                                            |\n\nReferences: [Wikipedia](https://en.wikipedia.org/wiki/Base64)\n\n## Ascii85\n\nAscii85, also known as Base85 encoding, uses a set of 85 distinct characters, which include all printable ASCII characters (except for whitespace) and an additional four characters that are used for padding and delimiting.\n\nAscii85 encoding is often used in environments where binary data needs to be represented in a compact, ASCII-friendly format.\n\n| Property         | Value                                                        |\n|------------------|--------------------------------------------------------------|\n| Efficiency       | 80.1 % (6.41 bit/char)                                       |\n| 32/64/128 bit    | 1-5/2-10/4-20 chars                                          |\n| Padding          | false                                                        |\n| Const. Out. Len. | false                                                        |\n| Suited for       | byte-string encoding                                         |\n| Alphabet         | `123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz` |\n| Known Usages     | Git, IPv6, Adobe PDF and PostScript                                |\n| Popularity       | implementations: not common, usage: not common               |\n| Variations       | ZeroMQ, ZMODEM, btoa, [Adobe](https://web.archive.org/web/20161222092741/https://www.adobe.com/products/postscript/pdfs/PLRM.pdf), [RFC 1924](https://datatracker.ietf.org/doc/html/rfc1924)                        |\n| Example          | `3.HC@Cj=D`                                                  |\n\nReferences: [Wikipedia](https://en.wikipedia.org/wiki/Ascii85)\n\n## Base122\n\nBase122 is an experimental encoding that facilitates printable and non-printable characters to maximize space efficiency. Base-122 can be used in any context of binary-to-text embedding where the text encoding is UTF-8.\n\n| Property         | Value                                                                   |\n|------------------|-------------------------------------------------------------------------|\n| Efficiency       | 86.6 % (6.93 bit/char)                                                  |\n| 32/64/128 bit    | ?                                                                       |\n| Padding          | false                                                                   |\n| Const. Out. Len. | false                                                                   |\n| Suited for       | embedding blobs in HTML (experimental)                                  |\n| Alphabet         | full 7bit minus some reserved chars (UTF-8 compatible)                  |\n| Known Usages     | none                                                                    |\n| Popularity       | implementations: not common, usage: not common                          |\n| Example          | `��v�~�` (non-printable characters, might not render correctly)         |\n\nReferences: [kevinalbs.com](https://github.com/kevinAlbs/Base122), [js reference implementation](https://github.com/kevinAlbs/Base122)",
  "user": {
    "name": "Patrick Favre-Bulle",
    "username": "favr",
    "twitter_username": null,
    "github_username": "patrickfav",
    "user_id": 1046960,
    "website_url": "https://favr.dev",
    "profile_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--K5zxWwlq--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/1046960/fb256604-2e26-4284-8811-bfc170feb2ff.jpeg",
    "profile_image_90": "https://res.cloudinary.com/practicaldev/image/fetch/s--x8FGQStF--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/1046960/fb256604-2e26-4284-8811-bfc170feb2ff.jpeg"
  }
}
