{
  "items": [
    {
      "owner": {
        "account_id": 405484,
        "reputation": 33089,
        "user_id": 774398,
        "user_type": "registered",
        "accept_rate": 83,
        "profile_image": "https://www.gravatar.com/avatar/52ff4dddcaea4c2df64711c8e3d70e23?s=256&d=identicon&r=PG",
        "display_name": "Patrick",
        "link": "https://stackoverflow.com/users/774398/patrick"
      },
      "is_accepted": false,
      "score": 962,
      "last_activity_date": 1592901566,
      "last_edit_date": 1592901566,
      "creation_date": 1401879433,
      "answer_id": 24035591,
      "question_id": 3591784,
      "content_license": "CC BY-SA 4.0",
      "body": "<p>The basic problem is, that you have to wait for the drawing phase for the actual measurements (especially with dynamic values like <code>wrap_content</code> or <code>match_parent</code>), but usually this phase hasn't been finished up to <code>onResume()</code>. So you need a workaround for waiting for this phase. There a are different possible solutions to this:</p>\n<h2>1. Listen to Draw/Layout Events: ViewTreeObserver</h2>\n<p>A ViewTreeObserver gets fired for different drawing events. Usually the <a href=\"http://developer.android.com/reference/android/view/ViewTreeObserver.OnGlobalLayoutListener.html\" rel=\"noreferrer\"><code>OnGlobalLayoutListener</code></a> is what you want for getting the measurement, so the code in the listener will be called after the layout phase, so the measurements are ready:</p>\n<pre><code>view.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() {\n            @Override\n            public void onGlobalLayout() {\n                view.getViewTreeObserver().removeOnGlobalLayoutListener(this);\n                view.getHeight(); //height is ready\n            }\n        });\n</code></pre>\n<p>Note: The listener will be immediately removed because otherwise it will fire on every layout event. If you have to support apps <em>SDK Lvl &lt; 16</em> use this to unregister the listener:</p>\n<p><code>public void removeGlobalOnLayoutListener (ViewTreeObserver.OnGlobalLayoutListener victim)</code></p>\n<br />\n<h2>2. Add a runnable to the layout queue: View.post()</h2>\n<p>Not very well known and my favourite solution. Basically just use the View's post method with your own runnable. This basically queues your code <em>after</em> the view's measure, layout, etc. as stated by <a href=\"https://stackoverflow.com/users/298575/romain-guy\">Romain Guy</a>:</p>\n<blockquote>\n<p>The UI event queue will process events in order. After\nsetContentView() is invoked, the event queue will contain a message\nasking for a relayout, so anything you post to the queue will happen\nafter the layout pass</p>\n</blockquote>\n<p>Example:</p>\n<pre><code>final View view=//smth;\n...\nview.post(new Runnable() {\n            @Override\n            public void run() {\n                view.getHeight(); //height is ready\n            }\n        });\n</code></pre>\n<p>The advantage over <code>ViewTreeObserver</code>:</p>\n<ul>\n<li>your code is only executed once and you don't have to disable the Observer after execution which can be a hassle</li>\n<li>less verbose syntax</li>\n</ul>\n<p>References:</p>\n<ul>\n<li><a href=\"https://stackoverflow.com/a/3602144/774398\">https://stackoverflow.com/a/3602144/774398</a></li>\n<li><a href=\"https://stackoverflow.com/a/3948036/774398\">https://stackoverflow.com/a/3948036/774398</a></li>\n</ul>\n<br />  \n<h2>3. Overwrite Views's onLayout Method</h2>\n<p>This is only practical in certain situation when the logic can be encapsulated in the view itself, otherwise this is a quite verbose and cumbersome syntax.</p>\n<pre><code>view = new View(this) {\n    @Override\n    protected void onLayout(boolean changed, int l, int t, int r, int b) {\n        super.onLayout(changed, l, t, r, b);\n        view.getHeight(); //height is ready\n    }\n};\n</code></pre>\n<p>Also mind, that onLayout will be called many times, so be considerate what you do in the method, or disable your code after the first time</p>\n<br />\n<h2>4. Check if has been through layout phase</h2>\n<p>If you have code that is executing multiple times while creating the ui you could use the following support v4 lib method:</p>\n<pre><code>View viewYouNeedHeightFrom = ...\n...\nif(ViewCompat.isLaidOut(viewYouNeedHeightFrom)) {\n   viewYouNeedHeightFrom.getHeight();\n}\n</code></pre>\n<blockquote>\n<p>Returns true if view has been through at least one layout since it was\nlast attached to or detached from a window.</p>\n</blockquote>\n<h2>Additional: Getting staticly defined measurements</h2>\n<p>If it suffices to just get the statically defined height/width, you can just do this with:</p>\n<ul>\n<li><a href=\"http://developer.android.com/reference/android/view/View.html#getMeasuredWidth()\" rel=\"noreferrer\"><code>View.getMeasuredWidth()</code></a></li>\n<li><a href=\"http://developer.android.com/reference/android/view/View.html#getMeasuredHeight()\" rel=\"noreferrer\"><code>View.getMeasuredHeigth()</code></a></li>\n</ul>\n<p>But mind you, that this might be different to the actual width/height after drawing. The javadoc describes the difference in more detail:</p>\n<blockquote>\n<p>The size of a view is expressed with a width and a height. A view\nactually possess two pairs of width and height values.</p>\n<p>The first pair is known as measured width and measured height. These\ndimensions define how big a view wants to be within its parent (see\nLayout for more details.) The measured dimensions can be obtained by\ncalling getMeasuredWidth() and getMeasuredHeight().</p>\n<p>The second pair is simply known as width and height, or sometimes\ndrawing width and drawing height. These dimensions define the actual\nsize of the view on screen, at drawing time and after layout. These\nvalues may, but do not have to, be different from the measured width\nand height. The width and height can be obtained by calling getWidth()\nand getHeight().</p>\n</blockquote>\n"
    },
    {
      "owner": {
        "account_id": 405484,
        "reputation": 33089,
        "user_id": 774398,
        "user_type": "registered",
        "accept_rate": 83,
        "profile_image": "https://www.gravatar.com/avatar/52ff4dddcaea4c2df64711c8e3d70e23?s=256&d=identicon&r=PG",
        "display_name": "Patrick",
        "link": "https://stackoverflow.com/users/774398/patrick"
      },
      "is_accepted": false,
      "score": 268,
      "last_activity_date": 1568538256,
      "last_edit_date": 1568538256,
      "creation_date": 1397681778,
      "answer_id": 23119957,
      "question_id": 2067955,
      "content_license": "CC BY-SA 4.0",
      "body": "<h2>Android Blur Guide 2016</h2>\n\n<p><a href=\"https://play.google.com/store/apps/details?id=at.favre.app.blurbenchmark\" rel=\"noreferrer\">with Showcase/Benchmark App</a> and <a href=\"https://github.com/patrickfav/BlurTestAndroid\" rel=\"noreferrer\">Source on Github</a>.\n<em>Also check out the Blur framework I'm currently working on: <a href=\"https://github.com/patrickfav/Dali\" rel=\"noreferrer\">Dali</a>.</em></p>\n\n<p>After experimenting a lot I can now safely give you some solid recommendations that will make your life easier in Android when using the Android Framework.</p>\n\n<h2>Load and Use a downscaled Bitmap (for very blurry images)</h2>\n\n<p>Never use a the full size of a Bitmap. The bigger the image the more needs to be blurred and also the higher the blur radius needs to be and usually, the higher the blur radius the longer the algorithm takes.</p>\n\n<pre><code>final BitmapFactory.Options options = new BitmapFactory.Options();\noptions.inSampleSize = 8;\nBitmap blurTemplate = BitmapFactory.decodeResource(getResources(), R.drawable.myImage, options);\n</code></pre>\n\n<p>This will load the bitmap with <code>inSampleSize</code> 8, so only 1/64 of the original image. Test what <code>inSampleSize</code> suits your needs, but keep it 2^n (2,4,8,...) to avoid degrading quality due to scaling. <a href=\"http://developer.android.com/training/displaying-bitmaps/load-bitmap.html#load-bitmap\" rel=\"noreferrer\">See Google doc for more</a> </p>\n\n<p>Another really big advantage is that bitmap loading will be really fast. In my early blur testing I figured that the longest time during the whole blur process was the image loading. So to load a 1920x1080 image from disk my Nexus 5 needed 500ms while the blurring only took another 250 ms or so.</p>\n\n<h2>Use Renderscript</h2>\n\n<p>Renderscript provides <a href=\"http://developer.android.com/reference/android/renderscript/ScriptIntrinsicBlur.html\" rel=\"noreferrer\"><code>ScriptIntrinsicBlur</code></a> which is a Gaussian blur filter. It has good visual quality and is just the fastest you realistically get on Android. Google claims to be <a href=\"http://android-developers.blogspot.co.at/2013/08/renderscript-intrinsics.html\" rel=\"noreferrer\">\"typically 2-3x faster than a multithreaded C implementation and often 10x+ faster than a Java implementation\"</a>. Renderscript is really sophisticated (using the fastest processing device (GPU, ISP, etc.), etc.) and there is also the <a href=\"http://developer.android.com/guide/topics/renderscript/compute.html#access-rs-apis\" rel=\"noreferrer\">v8 support library for it making it compatible down to 2.2</a>. Well at least in theory, through my own tests and reports from other devs it seems that it is not possible to use Renderscript blindly, since the hardware/driver fragmentation seems to cause problems with some devices, even with higher sdk lvl (e.g. I had troubles with the 4.1 Nexus S) so be careful and test on a lot of devices. Here's a simple example that will get you started:</p>\n\n<pre><code>//define this only once if blurring multiple times\nRenderScript rs = RenderScript.create(context);\n\n(...)\n//this will blur the bitmapOriginal with a radius of 8 and save it in bitmapOriginal\nfinal Allocation input = Allocation.createFromBitmap(rs, bitmapOriginal); //use this constructor for best performance, because it uses USAGE_SHARED mode which reuses memory\nfinal Allocation output = Allocation.createTyped(rs, input.getType());\nfinal ScriptIntrinsicBlur script = ScriptIntrinsicBlur.create(rs, Element.U8_4(rs));\nscript.setRadius(8f);\nscript.setInput(input);\nscript.forEach(output);\noutput.copyTo(bitmapOriginal);\n</code></pre>\n\n<p>When using the v8 support with Gradle, which is specifically recommended by Google <a href=\"http://developer.android.com/guide/topics/renderscript/compute.html#access-rs-apis\" rel=\"noreferrer\">\"because they include the latest improvements\"</a>, you only <a href=\"http://android-developers.blogspot.co.at/2013/09/renderscript-in-android-support-library.html\" rel=\"noreferrer\">need to add 2 lines to your build script</a> and use <code>android.support.v8.renderscript</code> with current build tools (<a href=\"http://tools.android.com/tech-docs/new-build-system\" rel=\"noreferrer\">updated syntax for android Gradle plugin v14+</a>)</p>\n\n<pre><code>android {\n    ...\n    defaultConfig {\n        ...\n        renderscriptTargetApi 19\n        renderscriptSupportModeEnabled true\n    }\n}\n</code></pre>\n\n<p>Simple benchmark on a Nexus 5 - comparing RenderScript with different other java and Renderscript implementations:</p>\n\n<p><img src=\"https://i.stack.imgur.com/pO3LN.png\" alt=\"The average runtime per blur on different pic sizes\">\nThe average runtime per blur on different pic sizes</p>\n\n<p><img src=\"https://i.stack.imgur.com/EjRgJ.png\" alt=\"Megapixels per sec that can be blurred\">\nMegapixels per sec that can be blurred</p>\n\n<p>Each value is the avg of 250 rounds. <code>RS_GAUSS_FAST</code> is <code>ScriptIntrinsicBlur</code> (and nearly always the fastest), others that start with <code>RS_</code> are mostly convolve implementations with simple kernels. <a href=\"https://github.com/patrickfav/BlurTestAndroid\" rel=\"noreferrer\">The details of the algorithms can be found here</a>. This is not purely blurring, since a good portion is garbage collection that is measured. This can be seen in this here (<code>ScriptIntrinsicBlur</code> on a 100x100 image with about 500 rounds)</p>\n\n<p><img src=\"https://i.stack.imgur.com/AdFr0.png\" alt=\"enter image description here\"></p>\n\n<p>The spikes are gc.</p>\n\n<p>You can check for yourself, the benchmark app is in the playstore: <a href=\"https://play.google.com/store/apps/details?id=at.favre.app.blurbenchmark\" rel=\"noreferrer\">BlurBenchmark</a></p>\n\n<h2>Reuses Bitmap wherever possible (if prio: performance > memory footprint)</h2>\n\n<p>If you need multiple blurs for a live blur or similar and your memory allows it do not load the bitmap from drawables multiple times, but keep it \"cached\" in a member variable. In this case always try to use the same variables, to keep garbage collecting to a minimum.</p>\n\n<p>Also check out the new <a href=\"http://developer.android.com/training/displaying-bitmaps/manage-memory.html#inBitmap\" rel=\"noreferrer\"><code>inBitmap</code> option when loading</a> from a file or drawable which will reuse the bitmap memory and save garbage collection time.</p>\n\n<h2>For blending from sharp to blurry</h2>\n\n<p>The simple and naive method is just to use 2 <code>ImageViews</code>, one blurred, and alpha fade them. But if you want a more sophisticated look that smoothly fades from sharp to blurry, then check out <a href=\"https://plus.google.com/+RomanNurik/posts/2sTQ1X2Cb2Z\" rel=\"noreferrer\">Roman Nurik's post about how to do it like in his Muzei app</a>.</p>\n\n<p>Basically he explains that he pre-blurs some frames with different blur extents and uses them as keyframes in an animation that looks really smooth.</p>\n\n<p><img src=\"https://i.stack.imgur.com/GosOl.png\" alt=\"Diagram where Nurik exaplains his approach\"></p>\n"
    },
    {
      "owner": {
        "account_id": 405484,
        "reputation": 33089,
        "user_id": 774398,
        "user_type": "registered",
        "accept_rate": 83,
        "profile_image": "https://www.gravatar.com/avatar/52ff4dddcaea4c2df64711c8e3d70e23?s=256&d=identicon&r=PG",
        "display_name": "Patrick",
        "link": "https://stackoverflow.com/users/774398/patrick"
      },
      "is_accepted": true,
      "score": 163,
      "last_activity_date": 1587216784,
      "last_edit_date": 1587216784,
      "creation_date": 1400164482,
      "answer_id": 23681349,
      "question_id": 23681177,
      "content_license": "CC BY-SA 4.0",
      "body": "<p>Of course you can. Its actually pretty straight forward:</p>\n\n<pre><code>File f = new File(\"path-to-file/file.png\");\n</code></pre>\n\n<p>or</p>\n\n<pre><code>File f = new File(uri);\n\nPicasso.get().load(f).into(imageView);\n</code></pre>\n\n<p>also </p>\n\n<pre><code>Picasso.get().load(uri).into(imageView);\n</code></pre>\n\n<p>works</p>\n"
    },
    {
      "owner": {
        "account_id": 405484,
        "reputation": 33089,
        "user_id": 774398,
        "user_type": "registered",
        "accept_rate": 83,
        "profile_image": "https://www.gravatar.com/avatar/52ff4dddcaea4c2df64711c8e3d70e23?s=256&d=identicon&r=PG",
        "display_name": "Patrick",
        "link": "https://stackoverflow.com/users/774398/patrick"
      },
      "is_accepted": false,
      "score": 152,
      "last_activity_date": 1666707285,
      "last_edit_date": 1666707285,
      "creation_date": 1569504961,
      "answer_id": 58118078,
      "question_id": 9655181,
      "content_license": "CC BY-SA 4.0",
      "body": "<p>Here are some common options ordered from simple (one-liner) to complex (huge library). If you are interested in performance, see the micro benchmarks below.</p>\n<h2>Option 1: Code snippet - Simple (only using JDK/Android)</h2>\n<h3>Option 1a: BigInteger</h3>\n<p>One very simple solution is to use the <code>BigInteger</code>'s hex representation:</p>\n<pre class=\"lang-java prettyprint-override\"><code>new BigInteger(1, someByteArray).toString(16);\n</code></pre>\n<p>Note that since this handles <em>numbers</em> not arbitrary <em>byte-strings</em> it will omit leading zeros - this may or may not be what you want (e.g. <code>000AE3</code> vs <code>0AE3</code> for a 3 byte input). This is also very slow, about <em>100x slower</em> compared to option 2.</p>\n<h3>Option 1b: String.format()</h3>\n<p>Using the <code>%X</code> placeholder, <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Formatter.html\" rel=\"noreferrer\"><code>String.format()</code></a> is able to encode most primitive types (<code>short</code>, <code>int</code>, <code>long</code>) to hex:</p>\n<pre class=\"lang-java prettyprint-override\"><code>String.format(&quot;%X&quot;, ByteBuffer.wrap(eightByteArray).getLong());\n</code></pre>\n<h3>Option 1c: Integer/Long (only 4/8 Byte Arrays)</h3>\n<p>If you <strong>exclusively have 4 bytes arrays</strong> you can use the <a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Integer.html#toHexString-int-\" rel=\"noreferrer\"><code>toHexString</code></a> method of the Integer class:</p>\n<pre class=\"lang-java prettyprint-override\"><code>Integer.toHexString(ByteBuffer.wrap(fourByteArray).getInt());\n</code></pre>\n<p>The same works with <strong>8 byte arrays</strong> and <a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Long.html#toHexString-long-\" rel=\"noreferrer\"><code>Long</code></a></p>\n<pre class=\"lang-java prettyprint-override\"><code>Long.toHexString(ByteBuffer.wrap(eightByteArray).getLong());\n</code></pre>\n<h3>Option 1d: JDK17+ HexFormat</h3>\n<p>Finally JDK 17 offers first-level support of straight forward hex encoding with <a href=\"https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/HexFormat.html\" rel=\"noreferrer\"><code>HexFormat</code></a>:</p>\n<pre class=\"lang-java prettyprint-override\"><code>HexFormat hex = HexFormat.of();\nhex.formatHex(someByteArray)\n</code></pre>\n<h2>Option 2: Code snippet - Advanced</h2>\n<p>Here is a full featured, copy &amp; pasteable code snippet supporting <strong>upper/lowercase</strong> and <a href=\"https://en.wikipedia.org/wiki/Endianness\" rel=\"noreferrer\"><strong>endianness</strong></a>. It is optimized to minimize memory complexity and maximize performance and should be compatible with all modern Java versions (5+).</p>\n<pre class=\"lang-java prettyprint-override\"><code>private static final char[] LOOKUP_TABLE_LOWER = new char[]{0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66};\nprivate static final char[] LOOKUP_TABLE_UPPER = new char[]{0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46};\n        \npublic static String encode(byte[] byteArray, boolean upperCase, ByteOrder byteOrder) {\n\n    // our output size will be exactly 2x byte-array length\n    final char[] buffer = new char[byteArray.length * 2];\n\n    // choose lower or uppercase lookup table\n    final char[] lookup = upperCase ? LOOKUP_TABLE_UPPER : LOOKUP_TABLE_LOWER;\n\n    int index;\n    for (int i = 0; i &lt; byteArray.length; i++) {\n        // for little endian we count from last to first\n        index = (byteOrder == ByteOrder.BIG_ENDIAN) ? i : byteArray.length - i - 1;\n        \n        // extract the upper 4 bit and look up char (0-A)\n        buffer[i &lt;&lt; 1] = lookup[(byteArray[index] &gt;&gt; 4) &amp; 0xF];\n        // extract the lower 4 bit and look up char (0-A)\n        buffer[(i &lt;&lt; 1) + 1] = lookup[(byteArray[index] &amp; 0xF)];\n    }\n    return new String(buffer);\n}\n\npublic static String encode(byte[] byteArray) {\n    return encode(byteArray, false, ByteOrder.BIG_ENDIAN);\n}\n</code></pre>\n<p>The full source code with Apache v2 license and decoder can be found <a href=\"https://github.com/patrickfav/bytes-java\" rel=\"noreferrer\">here</a>.</p>\n<h2>Option 3: Using a small optimized library: bytes-java</h2>\n<p>While working on my previous project, I created this little toolkit for working with bytes in Java. It has no external dependencies and is compatible with Java 7+. It includes, among others, a very fast and well tested HEX en/decoder:</p>\n<pre class=\"lang-java prettyprint-override\"><code>import at.favre.lib.bytes.Bytes;\n...\nBytes.wrap(someByteArray).encodeHex()\n</code></pre>\n<p>You can check it out on <a href=\"https://github.com/patrickfav/bytes-java\" rel=\"noreferrer\">Github: bytes-java</a>.</p>\n<h2>Option 4: Apache Commons Codec</h2>\n<p>Of course there is the good 'ol <a href=\"https://commons.apache.org/proper/commons-codec/\" rel=\"noreferrer\">commons codecs</a>. (<strong><em>warning opinion ahead</em></strong>) <em>While working on the project outlined above I analyzed the code and was quite disappointed; a lot of duplicate unorganized code, obsolete and exotic codecs probably only useful for very few and quite over engineered and slow implementations of popular codecs (specifically Base64). I therefore would make an informed decision if you want to use it or an alternative.</em> Anyways, if you still want to use it, here is a code snippet:</p>\n<pre class=\"lang-java prettyprint-override\"><code>import org.apache.commons.codec.binary.Hex;\n...\nHex.encodeHexString(someByteArray));\n</code></pre>\n<h2>Option 5: Google Guava</h2>\n<p>More often than not you already have <a href=\"https://guava.dev/releases/16.0/api/docs/com/google/common/io/BaseEncoding.html\" rel=\"noreferrer\">Guava</a> as a dependency. If so just use:</p>\n<pre class=\"lang-java prettyprint-override\"><code>import com.google.common.io.BaseEncoding;\n...\nBaseEncoding.base16().lowerCase().encode(someByteArray);\n</code></pre>\n<h2>Option 6: Spring Security</h2>\n<p>If you use the <a href=\"https://spring.io/\" rel=\"noreferrer\">Spring framework</a> with <a href=\"https://spring.io/projects/spring-security\" rel=\"noreferrer\">Spring Security</a> you can use the following:</p>\n<pre class=\"lang-java prettyprint-override\"><code>import org.springframework.security.crypto.codec.Hex\n...\nnew String(Hex.encode(someByteArray));\n</code></pre>\n<h2>Option 7: Bouncy Castle</h2>\n<p>If you already use the security framework <a href=\"https://www.bouncycastle.org/\" rel=\"noreferrer\">Bouncy Castle</a> you can use its <code>Hex</code> util:</p>\n<pre class=\"lang-java prettyprint-override\"><code>import org.bouncycastle.util.encoders.Hex;\n...\nHex.toHexString(someByteArray);\n</code></pre>\n<h2>Not Really Option 8: Java 9+ Compatibility or 'Do Not Use JAXBs javax/xml/bind/DatatypeConverter'</h2>\n<p>In previous Java (8 and below) versions the Java code for JAXB was included as runtime dependency. Since Java 9 and <a href=\"http://openjdk.java.net/projects/jigsaw/doc/jdk-modularization-tips\" rel=\"noreferrer\">Jigsaw modularisation</a> your code cannot access other code outside of it's module without explicit declaration. So be aware if you get an exception like:</p>\n<pre class=\"lang-java prettyprint-override\"><code>java.lang.NoClassDefFoundError: javax/xml/bind/JAXBException\n</code></pre>\n<p>when running on a JVM with Java 9+. If so then switch implementations to any of the alternatives above. See also this <a href=\"https://stackoverflow.com/q/43574426/774398\">question</a>.</p>\n<hr />\n<h1>Micro Benchmarks</h1>\n<p>Here are results from a simple <a href=\"https://openjdk.java.net/projects/code-tools/jmh/\" rel=\"noreferrer\">JMH</a> micro benchmark encoding <em>byte arrays of different sizes</em>. The values are operations per second, so <em><strong>higher is better.</strong></em>\nNote that micro benchmarks very often do not represent real world behavior, so take these results with a grain of salt.</p>\n<pre><code>| Name (ops/s)         |    16 byte |    32 byte |  128 byte | 0.95 MB |\n|----------------------|-----------:|-----------:|----------:|--------:|\n| Opt1: BigInteger     |  2,088,514 |  1,008,357 |   133,665 |       4 |\n| Opt2/3: Bytes Lib    | 20,423,170 | 16,049,841 | 6,685,522 |     825 |\n| Opt4: Apache Commons | 17,503,857 | 12,382,018 | 4,319,898 |     529 |\n| Opt5: Guava          | 10,177,925 |  6,937,833 | 2,094,658 |     257 |\n| Opt6: Spring         | 18,704,986 | 13,643,374 | 4,904,805 |     601 |\n| Opt7: BC             |  7,501,666 |  3,674,422 | 1,077,236 |     152 |\n| Opt8: JAX-B          | 13,497,736 |  8,312,834 | 2,590,940 |     346 |\n</code></pre>\n<p>Specs: JDK 8u202, i7-7700K, Win10, 24GB Ram. See the full benchmark <a href=\"https://github.com/patrickfav/bytes-java/blob/master/src/test/java/at/favre/lib/bytes/EncodingHexJmhBenchmark.java\" rel=\"noreferrer\">here</a>.</p>\n<h2>Benchmark Update 2022</h2>\n<p>Here are results with current JMH 1.35, Java 17 and a higher end computer</p>\n<pre><code>| Name (ops/s)         |    16 byte |    32 byte |  128 byte | 0.95 MB |\n|----------------------|-----------:|-----------:|----------:|--------:|\n| Opt1: BigInteger     |  2,941,403 |  1,389,448 |   242,096 |       5 |\n| Opt2/3: Bytes Lib    | 31,724,981 | 22,786,906 | 6,197,028 |     930 |\n</code></pre>\n<p>Specs: JDK temurin 17.0.4, Ryzen 5900X, Win11, 24GB DDR4 Ram</p>\n"
    },
    {
      "owner": {
        "account_id": 405484,
        "reputation": 33089,
        "user_id": 774398,
        "user_type": "registered",
        "accept_rate": 83,
        "profile_image": "https://www.gravatar.com/avatar/52ff4dddcaea4c2df64711c8e3d70e23?s=256&d=identicon&r=PG",
        "display_name": "Patrick",
        "link": "https://stackoverflow.com/users/774398/patrick"
      },
      "is_accepted": false,
      "score": 121,
      "last_activity_date": 1638343159,
      "last_edit_date": 1638343159,
      "creation_date": 1476565200,
      "answer_id": 40064149,
      "question_id": 10930331,
      "content_license": "CC BY-SA 4.0",
      "body": "<h1>Automated Process:</h1>\n<p>Use this tool (uses the new apksigner from Google):</p>\n<p><a href=\"https://github.com/patrickfav/uber-apk-signer\" rel=\"noreferrer\">https://github.com/patrickfav/uber-apk-signer</a></p>\n<p><sup>Disclaimer: Im the developer :)</sup></p>\n<h1>Manual Process:</h1>\n<h2>Step 1: Generate Keystore (only once)</h2>\n<p>You need to generate a keystore once and use it to sign your <code>unsigned</code> apk.\nUse the <a href=\"https://docs.oracle.com/javase/8/docs/technotes/tools/unix/keytool.html\" rel=\"noreferrer\"><code>keytool</code></a> <a href=\"https://stackoverflow.com/questions/4830253/where-is-the-keytool-application\">provided by the JDK</a> found in <code>%JAVA_HOME%/bin/</code></p>\n<pre><code>keytool -genkey -v -keystore my.keystore -keyalg RSA -keysize 2048 -validity 10000 -alias app\n</code></pre>\n<h2>Step 2 or 4: Zipalign</h2>\n<p><a href=\"https://developer.android.com/studio/command-line/zipalign.html\" rel=\"noreferrer\"><code>zipalign</code></a> <a href=\"https://stackoverflow.com/questions/24442213/cannot-find-zip-align-when-publishing-app\">which is a tool provided by the Android SDK</a> found in e.g. <code>%ANDROID_HOME%/sdk/build-tools/24.0.2/</code> is a mandatory optimization step if you want to upload the apk to the Play Store.</p>\n<pre><code>zipalign -p 4 my.apk my-aligned.apk\n</code></pre>\n<p><strong>Note:</strong> when using the old <code>jarsigner</code> you need to zipalign <em>AFTER</em> signing. When using the new <code>apksigner</code> method you do it <em>BEFORE</em> signing (confusing, I know). <a href=\"https://developer.android.com/studio/releases/build-tools.html\" rel=\"noreferrer\">Invoking zipalign before apksigner works fine</a> because apksigner preserves APK alignment and compression (unlike jarsigner).</p>\n<p>You can <em>verify</em> the alignment with</p>\n<pre><code>zipalign -c 4 my-aligned.apk\n</code></pre>\n<h2>Step 3: Sign &amp; Verify</h2>\n<h3>Using build-tools 24.0.2 and older</h3>\n<p>Use <a href=\"http://docs.oracle.com/javase/7/docs/technotes/tools/windows/jarsigner.html\" rel=\"noreferrer\"><code>jarsigner</code></a> which, like the keytool, <a href=\"https://stackoverflow.com/questions/12135699/where-is-jarsigner\">comes with the JDK distribution</a> found in  <code>%JAVA_HOME%/bin/</code> and use it like so:</p>\n<pre><code>jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore my.keystore my-app.apk my_alias_name\n</code></pre>\n<p>and can be verified with</p>\n<pre><code>jarsigner -verify -verbose my_application.apk\n</code></pre>\n<h3>Using build-tools 24.0.3 and newer</h3>\n<p>Android 7.0 introduces APK Signature Scheme v2, a new app-signing scheme that offers faster app install times and more protection against unauthorized alterations to APK files (See <a href=\"https://developer.android.com/about/versions/nougat/android-7.0.html#apk_signature_v2\" rel=\"noreferrer\">here</a> and <a href=\"https://source.android.com/security/apksigning/v2.html\" rel=\"noreferrer\">here</a> for more details). Therefore, Google implemented their <a href=\"https://developer.android.com/studio/command-line/apksigner.html\" rel=\"noreferrer\">own apk signer called <code>apksigner</code></a> (duh!)\nThe script file can be found in <code>%ANDROID_HOME%/sdk/build-tools/24.0.3/</code> (the .jar is in the <code>/lib</code> subfolder). Use it like this</p>\n<pre><code>apksigner sign --ks-key-alias alias_name --ks my.keystore my-app.apk\n</code></pre>\n<p>and can be verified with</p>\n<pre><code>apksigner verify my-app.apk\n</code></pre>\n<p><a href=\"https://developer.android.com/studio/publish/app-signing.html#signing-manually\" rel=\"noreferrer\">The official documentation can be found here.</a></p>\n"
    },
    {
      "owner": {
        "account_id": 405484,
        "reputation": 33089,
        "user_id": 774398,
        "user_type": "registered",
        "accept_rate": 83,
        "profile_image": "https://www.gravatar.com/avatar/52ff4dddcaea4c2df64711c8e3d70e23?s=256&d=identicon&r=PG",
        "display_name": "Patrick",
        "link": "https://stackoverflow.com/users/774398/patrick"
      },
      "is_accepted": false,
      "score": 95,
      "last_activity_date": 1517684704,
      "last_edit_date": 1517684704,
      "creation_date": 1459555233,
      "answer_id": 36367652,
      "question_id": 24745147,
      "content_license": "CC BY-SA 3.0",
      "body": "<p>Unfortunately, there is no recommended out-of-the-box scaling in Java that provides visually good results. Among others, here are the methods I recommend for scaling:</p>\n\n<ul>\n<li>Lanczos3 Resampling (usually visually better, but slower)</li>\n<li>Progressive Down Scaling (usually visually fine, can be quite fast)</li>\n<li>One-Step scaling for up scaling (with <code>Graphics2d</code> bicubic fast and good results, usually not as good as Lanczos3)</li>\n</ul>\n\n<p>Examples for every method can be found in this answer.</p>\n\n<h1>Visual Comparison</h1>\n\n<p>Here is your image scaled to <code>96x140</code> with different methods/libs. Click on the image to get the full size:</p>\n\n<p><a href=\"https://i.stack.imgur.com/sH1tO.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/sH1tO.png\" alt=\"comparison\"></a></p>\n\n<p><a href=\"https://i.stack.imgur.com/JhRQT.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/JhRQT.png\" alt=\"comparison zoom\"></a></p>\n\n<ol>\n<li>Morten Nobel's lib Lanczos3 </li>\n<li>Thumbnailator Bilinear Progressive Scaling</li>\n<li>Imgscalr ULTRA_QUALTY (1/7 step Bicubic Progressive Scaling)</li>\n<li>Imgscalr QUALTY (1/2 step Bicubic Progressive Scaling)</li>\n<li>Morten Nobel's lib Bilinear Progressive Scaling</li>\n<li><code>Graphics2d</code> Bicubic interpolation</li>\n<li><code>Graphics2d</code> Nearest Neighbor interpolation</li>\n<li>Photoshop CS5 bicubic as reference</li>\n</ol>\n\n<p>Unfortunately a single image is not enough to judge a scaling algorithm, you should test icons with sharp edges, photos with text, etc. </p>\n\n<h1>Lanczos Resampling</h1>\n\n<p>Is said to be good for up- and especially downscaling. Unfortunately <a href=\"http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6500894\" rel=\"noreferrer\">there is no native implementation in current JDK</a> so you either implement it yourself and use a lib like <a href=\"https://github.com/mortennobel/java-image-scaling\" rel=\"noreferrer\">Morten Nobel's lib</a>. A simple example using said lib:</p>\n\n<pre><code>ResampleOp resizeOp = new ResampleOp(dWidth, dHeight);\nresizeOp.setFilter(ResampleFilters.getLanczos3Filter());\nBufferedImage scaledImage = resizeOp.filter(imageToScale, null);\n</code></pre>\n\n<p>The lib is <a href=\"http://mvnrepository.com/artifact/com.mortennobel/java-image-scaling\" rel=\"noreferrer\">published on maven-central</a> which is not mentioned unfortunately. The downside is that it usually is very slow without any highly optimized or hardware accelerated implementations known to me. Nobel's implementation is about 8 times slower than a 1/2 step progressive scaling algorithm with <code>Graphics2d</code>. <a href=\"https://blog.nobel-joergensen.com/2008/12/20/downscaling-images-in-java/\" rel=\"noreferrer\">Read more about this lib on his blog</a>.</p>\n\n<h1>Progressive Scaling</h1>\n\n<p>Mentioned in <a href=\"https://community.oracle.com/docs/DOC-983611\" rel=\"noreferrer\">Chris Campbell's blog about scaling</a> in Java, progressive scaling is basically incrementally scaling an image in smaller steps until the final dimensions are reached. Campbell describes it as halving width/height until you reach target. This produces good results and can be used with <code>Graphics2D</code> which can be hardware accelerated, therefore usually having very good performance with acceptable results in most cases. The major downside of this is if downscaled less than half using <code>Graphics2D</code> provides the same mediocre results since it is only scaled once.</p>\n\n<p>Here is a simple example on how it works:</p>\n\n<p><a href=\"https://i.stack.imgur.com/xGtdc.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/xGtdc.png\" alt=\"progressive scaling\"></a></p>\n\n<p>The following libs incorporate forms of progressive scaling based on <code>Graphics2d</code>:</p>\n\n<h2><a href=\"https://github.com/coobird/thumbnailator\" rel=\"noreferrer\">Thumbnailator v0.4.8</a></h2>\n\n<p>Uses the progressive bilinear algorithm if the target is at least half of every dimension, otherwise it uses simple <code>Graphics2d</code> bilinear scaling and bicubic for upscaling.</p>\n\n<pre><code>Resizer resizer = DefaultResizerFactory.getInstance().getResizer(\n  new Dimension(imageToScale.getWidth(), imageToScale.getHeight()), \n  new Dimension(dWidth, dHeight))\nBufferedImage scaledImage = new FixedSizeThumbnailMaker(\n  dWidth, dHeight, false, true).resizer(resizer).make(imageToScale);\n</code></pre>\n\n<p>It is as fast or slightly faster than one-step scaling with <code>Graphics2d</code> scoring an average of 6.9 sec in my <a href=\"https://stackoverflow.com/a/36295066/774398\">benchmark</a>.</p>\n\n<h2><a href=\"https://github.com/thebuzzmedia/imgscalr\" rel=\"noreferrer\">Imgscalr v4.2</a></h2>\n\n<p>Uses progressive bicubic scaling. In the <code>QUALITY</code> setting it uses Campbell style algorithm with halving the dimensions every step while the <code>ULTRA_QUALITY</code> has finer steps, reducing the size every increment by 1/7 which generates generally softer images but minimizes the instances where only 1 iteration is used. </p>\n\n<pre><code>BufferedImage scaledImage = Scalr.resize(imageToScale, Scalr.Method.ULTRA_QUALITY, Scalr.Mode.FIT_EXACT, dWidth, dHeight, bufferedImageOpArray);\n</code></pre>\n\n<p>The major downside is performance. <code>ULTRA_QUALITY</code> is considerably slower than the other libs. Even <code>QUALITY</code> a bit slower than Thumbnailator's implementation. My simple <a href=\"https://stackoverflow.com/a/36295066/774398\">benchmark</a> resulted in 26.2 sec and 11.1 sec average respectively.</p>\n\n<h2><a href=\"https://github.com/mortennobel/java-image-scaling\" rel=\"noreferrer\">Morten Nobel's lib v0.8.6</a></h2>\n\n<p>Has also implementations for progressive scaling for all basic <code>Graphics2d</code> (bilinear, bicubic &amp; nearest neighbor)</p>\n\n<pre><code>BufferedImage scaledImage = new MultiStepRescaleOp(dWidth, dHeight, RenderingHints.VALUE_INTERPOLATION_BILINEAR).filter(imageToScale, null);\n</code></pre>\n\n<h1>A word on JDK Scaling Methods</h1>\n\n<p>Current jdk way to scale an image would be something like this</p>\n\n<pre><code>scaledImage = new BufferedImage(dWidth, dHeight, imageType);\nGraphics2D graphics2D = scaledImage.createGraphics();\ngraphics2D.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR);\ngraphics2D.drawImage(imageToScale, 0, 0, dWidth, dHeight, null);\ngraphics2D.dispose();\n</code></pre>\n\n<p>but most are very disappointed with the result of downscaling no matter what interpolation or other <code>RenderHints</code> are used. On the other hand upscaling seems to produce acceptable images (best would be bicubic). In previous JDK version (we talking 90s v1.1) <code>Image.getScaledInstance()</code> was introduced which provided good visual results with parameter <code>SCALE_AREA_AVERAGING</code> but you are discouraged to use it - <a href=\"https://community.oracle.com/docs/DOC-983611\" rel=\"noreferrer\">read the full explanation here</a>.</p>\n"
    },
    {
      "owner": {
        "account_id": 405484,
        "reputation": 33089,
        "user_id": 774398,
        "user_type": "registered",
        "accept_rate": 83,
        "profile_image": "https://www.gravatar.com/avatar/52ff4dddcaea4c2df64711c8e3d70e23?s=256&d=identicon&r=PG",
        "display_name": "Patrick",
        "link": "https://stackoverflow.com/users/774398/patrick"
      },
      "is_accepted": false,
      "community_owned_date": 1495973171,
      "score": 89,
      "last_activity_date": 1605198623,
      "last_edit_date": 1605198623,
      "creation_date": 1495973171,
      "answer_id": 44227131,
      "question_id": 41107,
      "content_license": "CC BY-SA 4.0",
      "body": "<p>This is easily achievable without any external libraries.</p>\n<h1>1. Cryptographic Pseudo Random Data Generation (PRNG)</h1>\n<p>First you need a cryptographic PRNG. Java has <a href=\"https://docs.oracle.com/javase/8/docs/api/java/security/SecureRandom.html\" rel=\"noreferrer\"><code>SecureRandom</code></a> for that and typically uses the best entropy source on the machine (e.g. <code>/dev/random</code>). <a href=\"https://tersesystems.com/2015/12/17/the-right-way-to-use-securerandom/\" rel=\"noreferrer\">Read more here</a>.</p>\n<pre><code>SecureRandom rnd = new SecureRandom();\nbyte[] token = new byte[byteLength];\nrnd.nextBytes(token);\n</code></pre>\n<p><em><strong>Note:</strong></em> <code>SecureRandom</code> is the slowest, but most secure way in Java of generating random bytes. I do however recommend <em>not</em> considering performance here since it usually has no real impact on your application unless you have to generate millions of tokens per second.</p>\n<h1>2. Required Space of Possible Values</h1>\n<p>Next you have to decide &quot;how unique&quot; your token needs to be. The whole and only point of considering entropy is to make sure that the system can resist brute force attacks: the space of possible values must be so large that any attacker could only try a negligible proportion of the values in non-ludicrous time<sup><a href=\"https://security.stackexchange.com/a/102163/60108\">1</a></sup>.</p>\n<p>Unique identifiers such as random <a href=\"https://en.wikipedia.org/wiki/Universally_unique_identifier\" rel=\"noreferrer\"><code>UUID</code></a> have 122 bit of entropy (i.e., 2^122 = 5.3x10^36) - the chance of collision is &quot;*(...) for there to be a one in a billion chance of duplication, 103 trillion version 4 UUIDs must be generated<sup><a href=\"https://en.wikipedia.org/wiki/Universally_unique_identifier#Collisions\" rel=\"noreferrer\">2</a></sup>&quot;. <strong>We will choose 128 bits since it fits exactly into 16 bytes</strong> and is seen as <a href=\"https://security.stackexchange.com/questions/6141/amount-of-simple-operations-that-is-safely-out-of-reach-for-all-humanity/6149#6149\">highly sufficient</a> for being unique for basically every, but the most extreme, use cases and you don't have to think about duplicates. Here is a simple comparison table of entropy including simple analysis of the <a href=\"https://en.wikipedia.org/wiki/Birthday_problem\" rel=\"noreferrer\">birthday problem</a>.</p>\n<p><a href=\"https://i.stack.imgur.com/LoLpJ.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/LoLpJ.png\" alt=\"Comparison of token sizes\" /></a></p>\n<p><sup>For simple requirements, 8 or 12 byte length might suffice, but with 16 bytes you are on the &quot;safe side&quot;.</sup></p>\n<p>And that's basically it. The last thing is to think about encoding so it can be represented as a printable text (read, a <code>String</code>).</p>\n<h1>3. Binary to Text Encoding</h1>\n<p>Typical encodings include:</p>\n<ul>\n<li><p><a href=\"https://en.wikipedia.org/wiki/Base64\" rel=\"noreferrer\"><code>Base64</code></a> every character encodes 6 bit, creating a 33% overhead. Fortunately there are standard implementations in <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Base64.html\" rel=\"noreferrer\">Java 8+</a> and <a href=\"https://developer.android.com/reference/android/util/Base64.html\" rel=\"noreferrer\">Android</a>. With older Java you can use any of the <a href=\"https://stackoverflow.com/questions/13109588/base64-encoding-in-java\">numerous third-party libraries</a>. If you want your tokens to be URL safe use the <a href=\"https://en.wikipedia.org/wiki/Base64#URL_applications\" rel=\"noreferrer\">URL-safe</a> version of RFC4648 (which usually is supported by most implementations). Example encoding 16 bytes with padding: <code>XfJhfv3C0P6ag7y9VQxSbw==</code></p>\n</li>\n<li><p><a href=\"https://en.wikipedia.org/wiki/Base32\" rel=\"noreferrer\"><code>Base32</code></a> every character encodes 5 bit, creating a 40% overhead. This will use <code>A-Z</code> and <code>2-7</code>, making it reasonably space efficient while being case-insensitive alpha-numeric. There isn't any <a href=\"https://stackoverflow.com/questions/21515479/encode-string-to-base32-string-in-java\">standard implementation in the JDK</a>. Example encoding 16 bytes without padding: <code>WUPIL5DQTZGMF4D3NX5L7LNFOY</code></p>\n</li>\n<li><p><a href=\"https://en.wikipedia.org/wiki/Hexadecimal\" rel=\"noreferrer\"><code>Base16</code></a> (hexadecimal) every character encodes four bit, requiring two characters per byte (i.e., 16 bytes create a string of length 32). Therefore hexadecimal is less space efficient than <code>Base32</code>, but it is safe to use in most cases (URL) since it only uses <code>0-9</code> and <code>A</code> to <code>F</code>. Example encoding 16 bytes: <code>4fa3dd0f57cb3bf331441ed285b27735</code>. <a href=\"https://stackoverflow.com/a/58118078/774398\">See a Stack Overflow discussion about converting to hexadecimal here</a>.</p>\n</li>\n</ul>\n<p>Additional encodings like <a href=\"https://en.wikipedia.org/wiki/Ascii85#RFC_1924_version\" rel=\"noreferrer\">Base85</a> and the exotic <a href=\"http://blog.kevinalbs.com/base122\" rel=\"noreferrer\">Base122</a> exist with better/worse space efficiency. You can create your own encoding (which basically most answers in this thread do), but I would advise against it, if you don't have very specific requirements. See <a href=\"https://en.wikipedia.org/wiki/Binary-to-text_encoding\" rel=\"noreferrer\">more encoding schemes in the Wikipedia article</a>.</p>\n<h1>4. Summary and Example</h1>\n<ul>\n<li>Use <a href=\"https://docs.oracle.com/javase/8/docs/api/java/security/SecureRandom.html\" rel=\"noreferrer\"><code>SecureRandom</code></a></li>\n<li>Use at least 16 bytes (2^128) of possible values</li>\n<li>Encode according to your requirements (usually <code>hex</code> or <code>base32</code> if you need it to be alpha-numeric)</li>\n</ul>\n<p><strong>Don't</strong></p>\n<ul>\n<li>... use your home brew encoding: <em>better maintainable and readable for others if they see what standard encoding you use instead of weird <em>for</em> loops creating characters at a time.</em></li>\n<li>... use UUID: <em>it has no guarantees on randomness; you are wasting 6 bits of entropy and have a verbose string representation</em></li>\n</ul>\n<h2>Example: Hexadecimal Token Generator</h2>\n<pre><code>public static String generateRandomHexToken(int byteLength) {\n    SecureRandom secureRandom = new SecureRandom();\n    byte[] token = new byte[byteLength];\n    secureRandom.nextBytes(token);\n    return new BigInteger(1, token).toString(16); // Hexadecimal encoding\n}\n\n//generateRandomHexToken(16) -&gt; 2189df7475e96aa3982dbeab266497cd\n</code></pre>\n<h2>Example: Base64 Token Generator (URL Safe)</h2>\n<pre><code>public static String generateRandomBase64Token(int byteLength) {\n    SecureRandom secureRandom = new SecureRandom();\n    byte[] token = new byte[byteLength];\n    secureRandom.nextBytes(token);\n    return Base64.getUrlEncoder().withoutPadding().encodeToString(token); //base64 encoding\n}\n\n//generateRandomBase64Token(16) -&gt; EEcCCAYuUcQk7IuzdaPzrg\n</code></pre>\n<h2>Example: Java CLI Tool</h2>\n<p>If you want a ready-to-use CLI tool you may use <a href=\"https://github.com/patrickfav/dice\" rel=\"noreferrer\">dice</a>:</p>\n<h2>Example: Related issue - Protect Your Current Ids</h2>\n<p>If you already have an id you can use (e.g., a synthetic <code>long</code> in your entity), but <a href=\"https://medium.com/@patrickfav/a-better-way-to-protect-your-database-ids-a33fa9867552\" rel=\"noreferrer\">don't want to publish the internal value</a>, you can use this library to encrypt it and obfuscate it: <a href=\"https://github.com/patrickfav/id-mask\" rel=\"noreferrer\">https://github.com/patrickfav/id-mask</a></p>\n<pre><code>IdMask&lt;Long&gt; idMask = IdMasks.forLongIds(Config.builder(key).build());\nString maskedId = idMask.mask(id);\n// Example: NPSBolhMyabUBdTyanrbqT8\nlong originalId = idMask.unmask(maskedId);\n</code></pre>\n"
    },
    {
      "owner": {
        "account_id": 405484,
        "reputation": 33089,
        "user_id": 774398,
        "user_type": "registered",
        "accept_rate": 83,
        "profile_image": "https://www.gravatar.com/avatar/52ff4dddcaea4c2df64711c8e3d70e23?s=256&d=identicon&r=PG",
        "display_name": "Patrick",
        "link": "https://stackoverflow.com/users/774398/patrick"
      },
      "is_accepted": false,
      "score": 83,
      "last_activity_date": 1587328614,
      "last_edit_date": 1587328614,
      "creation_date": 1540837391,
      "answer_id": 53051612,
      "question_id": 15554296,
      "content_license": "CC BY-SA 4.0",
      "body": "<p><em>In this answer I choose to approach the \"Simple Java AES encrypt/decrypt example\" main theme and not the specific debugging question because I think this will profit most readers.</em></p>\n\n<p>This is a simple summary of my <a href=\"https://proandroiddev.com/security-best-practices-symmetric-encryption-with-aes-in-java-7616beaaade9\" rel=\"noreferrer\">blog post about AES encryption in Java</a> so I recommend reading through it before implementing anything. I will however still provide a simple example to use and give some pointers what to watch out for.</p>\n\n<p>In this example I will choose to use <a href=\"https://en.wikipedia.org/wiki/Authenticated_encryption\" rel=\"noreferrer\">authenticated encryption</a> with <a href=\"https://en.wikipedia.org/wiki/Galois/Counter_Mode\" rel=\"noreferrer\">Galois/Counter Mode or GCM</a> mode. The reason is that in most case you want  <a href=\"https://security.stackexchange.com/questions/148173/authenticity-confidentiality-integrity-general-questions\">integrity and authenticity in combination with confidentiality</a> (read more in the <a href=\"https://proandroiddev.com/security-best-practices-symmetric-encryption-with-aes-in-java-7616beaaade9\" rel=\"noreferrer\">blog</a>).</p>\n\n<h2>AES-GCM Encryption/Decryption Tutorial</h2>\n\n<p>Here are the steps required to encrypt/decrypt with <a href=\"https://en.wikipedia.org/wiki/Galois/Counter_Mode\" rel=\"noreferrer\">AES-GCM</a> with the <a href=\"https://en.wikipedia.org/wiki/Java_Cryptography_Architecture\" rel=\"noreferrer\">Java Cryptography Architecture (JCA)</a>. <strong>Do not mix with other examples</strong>, as subtle differences may make your code utterly insecure.</p>\n\n<h3>1. Create Key</h3>\n\n<p>As it depends on your use-case, I will assume the simplest case: a random secret key.</p>\n\n<pre><code>SecureRandom secureRandom = new SecureRandom();\nbyte[] key = new byte[16];\nsecureRandom.nextBytes(key);\nSecretKey secretKey = SecretKeySpec(key, \"AES\");\n</code></pre>\n\n<p><strong>Important:</strong></p>\n\n<ul>\n<li>always use a strong <a href=\"https://en.wikipedia.org/wiki/Pseudorandom_number_generator\" rel=\"noreferrer\">pseudorandom number generator</a> like <a href=\"https://docs.oracle.com/javase/8/docs/api/java/security/SecureRandom.html\" rel=\"noreferrer\"><code>SecureRandom</code></a></li>\n<li>use 16 byte / 128 bit long key (or more - <a href=\"https://security.stackexchange.com/a/6149/60108\">but more is seldom needed</a>)</li>\n<li>if you want a key derived from a user password, look into a <a href=\"https://en.wikipedia.org/wiki/Cryptographic_hash_function#Password_verification\" rel=\"noreferrer\">password hash function (or KDF)</a> with <a href=\"https://en.wikipedia.org/wiki/Key_stretching\" rel=\"noreferrer\">stretching property</a> like <a href=\"https://en.wikipedia.org/wiki/PBKDF2\" rel=\"noreferrer\">PBKDF2</a> or <a href=\"https://en.wikipedia.org/wiki/Bcrypt\" rel=\"noreferrer\">bcrypt</a></li>\n<li>if you want a key derived from other sources, use a proper <a href=\"https://en.wikipedia.org/wiki/Key_derivation_function\" rel=\"noreferrer\">key derivation function (KDF)</a> like <a href=\"https://en.wikipedia.org/wiki/HKDF\" rel=\"noreferrer\">HKDF</a> (<a href=\"https://github.com/patrickfav/hkdf\" rel=\"noreferrer\">Java implementation here</a>). Do <em>not</em> use simple <a href=\"https://simple.wikipedia.org/wiki/Cryptographic_hash_function\" rel=\"noreferrer\">cryptographic hashes</a> for that (like <a href=\"https://en.wikipedia.org/wiki/SHA-2\" rel=\"noreferrer\">SHA-256</a>).</li>\n</ul>\n\n<h3>2. Create the Initialization Vector</h3>\n\n<p>An <a href=\"https://en.wikipedia.org/wiki/Initialization_vector\" rel=\"noreferrer\">initialization vector (IV)</a> is used so that the same secret key will create different <a href=\"https://en.wikipedia.org/wiki/Ciphertext\" rel=\"noreferrer\">cipher texts</a>.</p>\n\n<pre><code>byte[] iv = new byte[12]; //NEVER REUSE THIS IV WITH SAME KEY\nsecureRandom.nextBytes(iv);\n</code></pre>\n\n<p><strong>Important:</strong></p>\n\n<ul>\n<li>never <a href=\"https://crypto.stackexchange.com/questions/2991/why-must-IV-key-pairs-not-be-reused-in-ctr-mode\">reuse the same IV</a> with the same key (<strong>very important</strong> in <a href=\"https://en.wikipedia.org/wiki/Galois/Counter_Mode\" rel=\"noreferrer\">GCM</a>/<a href=\"https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Counter_(CTR)\" rel=\"noreferrer\">CTR</a> mode)</li>\n<li>the IV must be unique (ie. use random IV or a counter)</li>\n<li>the IV is not required to be secret</li>\n<li>always use a strong <a href=\"https://en.wikipedia.org/wiki/Pseudorandom_number_generator\" rel=\"noreferrer\">pseudorandom number generator</a> like <a href=\"https://docs.oracle.com/javase/8/docs/api/java/security/SecureRandom.html\" rel=\"noreferrer\"><code>SecureRandom</code></a></li>\n<li>12 byte IV is the correct <a href=\"https://crypto.stackexchange.com/questions/41601/aes-gcm-recommended-IV-size-why-12-bytes\">choice for AES-GCM mode</a></li>\n</ul>\n\n<h3>3. Encrypt with IV and Key</h3>\n\n<pre><code>final Cipher cipher = Cipher.getInstance(\"AES/GCM/NoPadding\");\nGCMParameterSpec parameterSpec = new GCMParameterSpec(128, iv); //128 bit auth tag length\ncipher.init(Cipher.ENCRYPT_MODE, secretKey, parameterSpec);\nbyte[] cipherText = cipher.doFinal(plainText);\n</code></pre>\n\n<p><strong>Important:</strong></p>\n\n<ul>\n<li>use 16 byte / 128 bit <a href=\"https://en.wikipedia.org/wiki/Authenticated_encryption\" rel=\"noreferrer\">authentication tag</a> (used to verify integrity/authenticity)</li>\n<li>the authentication tag will be automatically appended to the cipher text (in the JCA implementation)</li>\n<li>since GCM behaves like a stream cipher, no padding is required</li>\n<li>use <a href=\"https://docs.oracle.com/javase/7/docs/api/javax/crypto/CipherInputStream.html\" rel=\"noreferrer\"><code>CipherInputStream</code></a> when encrypting large chunks of data</li>\n<li>want additional (non-secret) data checked if it was changed? You may want to use <a href=\"https://crypto.stackexchange.com/questions/6711/how-to-use-gcm-mode-and-associated-data-properly\">associated data</a> with <code>cipher.updateAAD(associatedData);</code> <a href=\"https://en.wikipedia.org/wiki/Authenticated_encryption#Authenticated_encryption_with_associated_data_(AEAD)\" rel=\"noreferrer\">More here.</a></li>\n</ul>\n\n<h3>3. Serialize to Single Message</h3>\n\n<p>Just append IV and ciphertext. As stated above, the IV doesn't need to be secret.</p>\n\n<pre><code>ByteBuffer byteBuffer = ByteBuffer.allocate(iv.length + cipherText.length);\nbyteBuffer.put(iv);\nbyteBuffer.put(cipherText);\nbyte[] cipherMessage = byteBuffer.array();\n</code></pre>\n\n<p>Optionally encode with <a href=\"https://en.wikipedia.org/wiki/Base64\" rel=\"noreferrer\">Base64</a> if you need a string representation. Either use <a href=\"https://developer.android.com/reference/android/util/Base64.html\" rel=\"noreferrer\">Android's</a> or <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Base64.html\" rel=\"noreferrer\">Java 8's built-in</a> implementation (do not use Apache Commons Codec - it's an awful implementation). Encoding is used to \"convert\" byte arrays to string representation to make it ASCII safe e.g.:</p>\n\n<pre><code>String base64CipherMessage = Base64.getEncoder().encodeToString(cipherMessage);\n</code></pre>\n\n<h3>4. Prepare Decryption: Deserialize</h3>\n\n<p>If you have encoded the message, first decode it to byte array:</p>\n\n<pre><code>byte[] cipherMessage = Base64.getDecoder().decode(base64CipherMessage)\n</code></pre>\n\n<p><strong>Important:</strong></p>\n\n<ul>\n<li>be careful to validate <a href=\"https://cwe.mitre.org/data/definitions/789.html\" rel=\"noreferrer\">input parameters</a>, so to avoid <a href=\"https://en.wikipedia.org/wiki/Denial-of-service_attack\" rel=\"noreferrer\">denial of service attacks</a> by allocating too much memory.</li>\n</ul>\n\n<h3>5. Decrypt</h3>\n\n<p>Initialize the cipher and set the same parameters as with the encryption:</p>\n\n<pre><code>final Cipher cipher = Cipher.getInstance(\"AES/GCM/NoPadding\");\n//use first 12 bytes for iv\nAlgorithmParameterSpec gcmIv = new GCMParameterSpec(128, cipherMessage, 0, 12);\ncipher.init(Cipher.DECRYPT_MODE, secretKey, gcmIv);\n//use everything from 12 bytes on as ciphertext\nbyte[] plainText = cipher.doFinal(cipherMessage, 12, cipherMessage.length - 12);\n</code></pre>\n\n<p><strong>Important:</strong></p>\n\n<ul>\n<li>don't forget to add <a href=\"https://crypto.stackexchange.com/questions/6711/how-to-use-gcm-mode-and-associated-data-properly\">associated data</a> with <code>cipher.updateAAD(associatedData);</code> if you added it during encryption.</li>\n</ul>\n\n<p><a href=\"https://gist.github.com/patrickfav/7e28d4eb4bf500f7ee8012c4a0cf7bbf\" rel=\"noreferrer\">A working code snippet can be found in this gist.</a></p>\n\n<hr>\n\n<p>Note that most recent Android (SDK 21+) and Java (7+) implementations should have AES-GCM. Older versions may lack it. I still choose this mode, since it is easier to implement in addition to being more efficient compared to similar mode of <a href=\"https://en.wikipedia.org/wiki/Authenticated_encryption#MAC-then-Encrypt_(MtE)\" rel=\"noreferrer\">Encrypt-then-Mac</a> (with e.g. <a href=\"https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Cipher_Block_Chaining_(CBC)\" rel=\"noreferrer\">AES-CBC</a> + <a href=\"https://en.wikipedia.org/wiki/HMAC\" rel=\"noreferrer\">HMAC</a>). <a href=\"https://proandroiddev.com/security-best-practices-symmetric-encryption-with-aes-in-java-and-android-part-2-b3b80e99ad36\" rel=\"noreferrer\">See this article on how to implement AES-CBC with HMAC</a>.</p>\n"
    },
    {
      "owner": {
        "account_id": 405484,
        "reputation": 33089,
        "user_id": 774398,
        "user_type": "registered",
        "accept_rate": 83,
        "profile_image": "https://www.gravatar.com/avatar/52ff4dddcaea4c2df64711c8e3d70e23?s=256&d=identicon&r=PG",
        "display_name": "Patrick",
        "link": "https://stackoverflow.com/users/774398/patrick"
      },
      "is_accepted": false,
      "score": 78,
      "last_activity_date": 1475955161,
      "last_edit_date": 1495541426,
      "creation_date": 1424349928,
      "answer_id": 28606782,
      "question_id": 15209831,
      "content_license": "CC BY-SA 3.0",
      "body": "<p>As already stated, you have too many methods (more than 65k) in your project and libs.</p>\n\n<h2>Prevent the Problem: Reduce the number of methods with Play Services 6.5+ and support-v4 24.2+</h2>\n\n<p>Since often the Google Play services is one of the main suspects in \"wasting\" methods with its <a href=\"http://jakewharton.com/play-services-is-a-monolith/\" rel=\"noreferrer\">20k+ methods</a>. Google Play services version 6.5 or later, it is possible for you to include <a href=\"http://android-developers.blogspot.co.at/2014/12/google-play-services-and-dex-method.html\" rel=\"noreferrer\">Google Play services in your application using a number of smaller client libraries.</a> For example, if you only need GCM and maps you can choose to use these dependencies only:</p>\n\n<pre><code>dependencies {\n    compile 'com.google.android.gms:play-services-base:6.5.+'\n    compile 'com.google.android.gms:play-services-maps:6.5.+'\n}\n</code></pre>\n\n<p><a href=\"https://developer.android.com/google/play-services/setup.html?utm_campaign=dex-1214&amp;utm_source=dac&amp;utm_medium=blog\" rel=\"noreferrer\">The full list of sub libraries and it's responsibilities can be found in the official google doc</a>.</p>\n\n<p><strong>Update</strong>: Since Support Library v4 v24.2.0 it was split up into the following modules:</p>\n\n<blockquote>\n  <p><code>support-compat</code>, <code>support-core-utils</code>, <code>support-core-ui</code>, <code>support-media-compat</code> and <code>support-fragment</code></p>\n</blockquote>\n\n<pre><code>dependencies {\n    compile 'com.android.support:support-fragment:24.2.+'\n}\n</code></pre>\n\n<p>Do note however, if you use <code>support-fragment</code>, it will have dependencies to all the other modules (ie. if you use <code>android.support.v4.app.Fragment</code> there is no benefit)</p>\n\n<p><a href=\"https://developer.android.com/topic/libraries/support-library/revisions.html\" rel=\"noreferrer\">See here the official release notes for support-v4 lib</a></p>\n\n<hr>\n\n<h2>Enable MultiDexing</h2>\n\n<p>Since Lollipop (aka build tools 21+) it is very easy to handle. The approach is to work around the 65k methods per dex file problem to create multiple dex files for your app. Add the following to your gradle build file (<a href=\"http://developer.android.com/tools/building/multidex.html\" rel=\"noreferrer\">this is taken from the official google doc on applications with more than 65k methods</a>):</p>\n\n<pre><code>android {\n    compileSdkVersion 21\n    buildToolsVersion \"21.1.0\"\n\n    defaultConfig {\n        ...\n        // Enabling multidex support.\n        multiDexEnabled true\n    }\n    ...\n}\n\ndependencies {\n  compile 'com.android.support:multidex:1.0.1'\n}\n</code></pre>\n\n<p>The second step is to either prepare your Application class or if you don't extend Application use the <code>MultiDexApplication</code> in your Android Manifest:</p>\n\n<p>Either add this to your Application.java</p>\n\n<pre><code>@Override\n  protected void attachBaseContext(Context base) {\n    super.attachBaseContext(base);\n    MultiDex.install(this);\n  }\n</code></pre>\n\n<p><strong>or</strong> use the provided application from the mutlidex lib</p>\n\n<pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    package=\"com.example.android.myapplication\"&gt;\n    &lt;application\n        ...\n        android:name=\"android.support.multidex.MultiDexApplication\"&gt;\n        ...\n    &lt;/application&gt;\n&lt;/manifest&gt;\n</code></pre>\n\n<hr>\n\n<h2>Prevent OutOfMemory with MultiDex</h2>\n\n<p>As further tip, if you run into <code>OutOfMemory</code> exceptions during the build phase you could enlarge the heap with</p>\n\n<pre><code>android {\n    ...\n    dexOptions {\n        javaMaxHeapSize \"4g\"\n    }\n}\n</code></pre>\n\n<p>which would set the heap to 4 gigabytes.</p>\n\n<p><a href=\"https://stackoverflow.com/questions/25013638/android-studio-google-jar-causing-gc-overhead-limit-exceeded-error\">See this question for more detail on the dex heap memory issue.</a></p>\n\n<hr>\n\n<h2>Analyze the source of the Problem</h2>\n\n<p>To analyze the source of the methods the gradle plugin  <a href=\"https://github.com/KeepSafe/dexcount-gradle-plugin\" rel=\"noreferrer\">https://github.com/KeepSafe/dexcount-gradle-plugin</a> can help in combination with the dependency tree provided by gradle with e.g.</p>\n\n<pre><code>.\\gradlew app:dependencies\n</code></pre>\n\n<p><a href=\"https://stackoverflow.com/a/32328348/774398\">See this answer and question for more information on method count in android</a></p>\n"
    },
    {
      "owner": {
        "account_id": 405484,
        "reputation": 33089,
        "user_id": 774398,
        "user_type": "registered",
        "accept_rate": 83,
        "profile_image": "https://www.gravatar.com/avatar/52ff4dddcaea4c2df64711c8e3d70e23?s=256&d=identicon&r=PG",
        "display_name": "Patrick",
        "link": "https://stackoverflow.com/users/774398/patrick"
      },
      "is_accepted": false,
      "score": 67,
      "last_activity_date": 1552993487,
      "last_edit_date": 1552993487,
      "creation_date": 1509389235,
      "answer_id": 47022263,
      "question_id": 11029294,
      "content_license": "CC BY-SA 4.0",
      "body": "<h3>Up to Android 7.1 (SDK 25)</h3>\n\n<p>Until Android 7.1 you will get it with:</p>\n\n<pre><code>Build.SERIAL\n</code></pre>\n\n<h3>From Android 8 (SDK 26)</h3>\n\n<p>On Android 8 (SDK 26) and above, this field will return <a href=\"https://developer.android.com/reference/android/os/Build.html#UNKNOWN\" rel=\"noreferrer\"><code>UNKNOWN</code></a> and must be accessed with:</p>\n\n<pre><code>Build.getSerial()\n</code></pre>\n\n<p>which requires the <a href=\"https://developer.android.com/guide/topics/permissions/requesting.html#normal-dangerous\" rel=\"noreferrer\">dangerous permission</a>\n <a href=\"https://developer.android.com/reference/android/Manifest.permission.html#READ_PHONE_STATE\" rel=\"noreferrer\"><code>android.permission.READ_PHONE_STATE</code></a>. </p>\n\n<h3>From Android Q (SDK 29)</h3>\n\n<p>Since Android Q using <code>Build.getSerial()</code> gets a bit more complicated by requiring:</p>\n\n<p><code>android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE</code> (which can only be acquired by system apps), <strong>or</strong> for the calling package to be the <em>device or profile owner</em> and have the <a href=\"https://developer.android.com/reference/android/Manifest.permission.html#READ_PHONE_STATE\" rel=\"noreferrer\"><code>READ_PHONE_STATE</code></a> permission. This means most apps won't be able to uses this feature. See the <a href=\"https://developer.android.com/preview/privacy/data-identifiers#device-ids\" rel=\"noreferrer\">Android Q announcement</a> from Google.</p>\n\n<p>See <a href=\"https://developer.android.com/reference/android/os/Build.html#getSerial()\" rel=\"noreferrer\">Android SDK reference</a> </p>\n\n<hr>\n\n<h2>Best Practice for Unique Device Identifier</h2>\n\n<p>If you just require a unique identifier, it's best to avoid using hardware identifiers as Google continuously tries to make it harder to access them for privacy reasons. You could just generate a <code>UUID.randomUUID().toString();</code> and save it the first time it needs to be accessed in e.g. shared preferences. Alternatively you could use <a href=\"https://stackoverflow.com/questions/2785485/is-there-a-unique-android-device-id\"><code>ANDROID_ID</code></a> which is a 8 byte long hex string unique to the device, user and (only Android 8+) app installation. For more info on that topic, see <a href=\"https://developer.android.com/training/articles/user-data-ids\" rel=\"noreferrer\">Best practices for unique identifiers</a>.</p>\n"
    },
    {
      "owner": {
        "account_id": 405484,
        "reputation": 33089,
        "user_id": 774398,
        "user_type": "registered",
        "accept_rate": 83,
        "profile_image": "https://www.gravatar.com/avatar/52ff4dddcaea4c2df64711c8e3d70e23?s=256&d=identicon&r=PG",
        "display_name": "Patrick",
        "link": "https://stackoverflow.com/users/774398/patrick"
      },
      "is_accepted": false,
      "score": 59,
      "last_activity_date": 1417015846,
      "last_edit_date": 1495541819,
      "creation_date": 1382965789,
      "answer_id": 19635699,
      "question_id": 18556280,
      "content_license": "CC BY-SA 3.0",
      "body": "<p>Are you using Windows? This error could happen if the generated build file path exceeds the Windows (<em>not NTFS</em>) max path length of <strong>260</strong> characters. Make sure your project path is not too long, use short names as well. <a href=\"http://msdn.microsoft.com/en-us/library/windows/desktop/aa365247%28v=vs.85%29.aspx\" rel=\"nofollow noreferrer\">More info from MS:</a></p>\n\n<blockquote>\n  <p><strong>Maximum Path Length Limitation</strong>\n  In the Windows API (with some exceptions discussed in the following paragraphs), the maximum length for a path is MAX_PATH, which is defined as 260 characters. A local path is structured in the following order: drive letter, colon, backslash, name components separated by backslashes, and a terminating null character. For example, the maximum path on drive D is \"D:\\some 256-character path string\" where \"\" represents the invisible terminating null character for the current system codepage. (The characters &lt; > are used here for visual clarity and cannot be part of a valid path string.)</p>\n</blockquote>\n\n<p>Also see <a href=\"https://stackoverflow.com/questions/1880321/why-does-the-260-character-path-length-limit-exist-in-windows\">discussion why the limitation Windows exists.</a></p>\n"
    },
    {
      "owner": {
        "account_id": 405484,
        "reputation": 33089,
        "user_id": 774398,
        "user_type": "registered",
        "accept_rate": 83,
        "profile_image": "https://www.gravatar.com/avatar/52ff4dddcaea4c2df64711c8e3d70e23?s=256&d=identicon&r=PG",
        "display_name": "Patrick",
        "link": "https://stackoverflow.com/users/774398/patrick"
      },
      "is_accepted": false,
      "score": 52,
      "last_activity_date": 1561722938,
      "last_edit_date": 1561722938,
      "creation_date": 1561720885,
      "answer_id": 56806022,
      "question_id": 56794263,
      "content_license": "CC BY-SA 4.0",
      "body": "<p>Currently there are 2 basic concepts to handle parallel access to a web-server with various advantages and disadvantages:</p>\n\n<ol>\n<li><strong>Blocking</strong></li>\n<li><strong>Non-Blocking</strong></li>\n</ol>\n\n<h2>Blocking Web-Servers</h2>\n\n<p>The first concept of <em>blocking, multi-threaded</em> server has a finite set amount of threads in a pool. Every request will get assigned to specific thread and this thread will be assigned until the request has been fully served. This is basically the same as how a the checkout queues in a super market works, a customer at a time with possible parallel lines. In most circumstances a request in a web server will be cpu-idle for the majority of the time while processing the request. This is due the fact that it has to wait for I/O: read the socket, write to the db (which is also basically IO) and read the result and write to the socket. Additionally using/creating a bunch of threads is slow (context switching) and requires a lot of memory. Therefore this concept often does not use the hardware resources it has very efficiently and has a hard limit on how many clients can be served in parallel. This property is misused in so called starvation attacks, e.g. the <a href=\"https://www.youtube.com/watch?v=XiFkyR35v2Y\" rel=\"noreferrer\">slow loris</a>, an attack where usually a single client can DOS a big multi-threaded web-server with little effort.</p>\n\n<h3>Summary</h3>\n\n<ul>\n<li>(+) simpler code</li>\n<li>(-) hard limit of parallel clients</li>\n<li>(-) requires more memory</li>\n<li>(-) inefficient use of hardware for usual web-server work</li>\n<li>(-) easy to DOS</li>\n</ul>\n\n<p>Most \"conventional\" web server work that way, e.g. older tomcat, Apache Webserver, and everything <code>Servlet</code> older than 3 or 3.1 etc. </p>\n\n<h2>Non-Blocking Web-Servers</h2>\n\n<p>In contrast a non-blocking web-server can serve multiple clients with only a single thread. That is because it uses the <em><a href=\"https://jameshfisher.com/2017/04/05/set_socket_nonblocking/\" rel=\"noreferrer\">non-blocking kernel I/O features</a></em>. These are just kernel calls which immediately return and call back when something can be written or read, making the cpu free to do other work instead. Reusing our supermarket metaphor, this would be like, when a cashier needs his supervisor to solve a problem, he does not wait and block the whole lane, but starts to check out the next customer until the supervisor arrives and solves the problem of the first customer.</p>\n\n<p>This is often done in an event loop or higher abstractions as <a href=\"https://en.wikipedia.org/wiki/Green_threads\" rel=\"noreferrer\">green-threads</a> or <a href=\"https://cr.openjdk.java.net/~rpressler/loom/Loom-Proposal.html\" rel=\"noreferrer\">fibers</a>. In essence such servers can't really process anything <em>concurrently</em> (of course you can have multiple non-blocking threads), but they are able to serve thousands of clients in parallel because the memory consumption will not scale as drastically as with the multi-thread concept (read: there is no hard limit on max parallel clients). Also there is no thread context-switching. The downside is, that non-blocking code is often more complex to read and write (e.g. <a href=\"http://callbackhell.com/\" rel=\"noreferrer\">callback-hell</a>) and doesn't prefrom well in situations where a request does a lot of cpu-expensive work. </p>\n\n<h3>Summary</h3>\n\n<ul>\n<li>(-) more complex code</li>\n<li>(-) performance worse with cpu intensive tasks</li>\n<li>(+) uses resources much more efficiently as web server</li>\n<li>(+) many more parallel clients with no hard-limit (except max memory)</li>\n</ul>\n\n<p>Most modern \"fast\" web-servers and framework facilitate non-blocking concepts: Netty, Vert.x, Webflux, nginx, servlet 3.1+, Node, Go Webservers.</p>\n\n<p>As a side note, looking at this benchmark page you will see that most of the fastest web-servers are usually non-blocking ones: <a href=\"https://www.techempower.com/benchmarks/\" rel=\"noreferrer\">https://www.techempower.com/benchmarks/</a></p>\n\n<hr>\n\n<h3>See also</h3>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/a/21155697/774398\">https://stackoverflow.com/a/21155697/774398</a></li>\n<li><a href=\"https://www.quora.com/What-exactly-does-it-mean-for-a-web-server-to-be-blocking-versus-non-blocking\" rel=\"noreferrer\">https://www.quora.com/What-exactly-does-it-mean-for-a-web-server-to-be-blocking-versus-non-blocking</a></li>\n</ul>\n"
    },
    {
      "owner": {
        "account_id": 405484,
        "reputation": 33089,
        "user_id": 774398,
        "user_type": "registered",
        "accept_rate": 83,
        "profile_image": "https://www.gravatar.com/avatar/52ff4dddcaea4c2df64711c8e3d70e23?s=256&d=identicon&r=PG",
        "display_name": "Patrick",
        "link": "https://stackoverflow.com/users/774398/patrick"
      },
      "is_accepted": false,
      "score": 51,
      "last_activity_date": 1493135220,
      "last_edit_date": 1495542848,
      "creation_date": 1391450095,
      "answer_id": 21534175,
      "question_id": 17121213,
      "content_license": "CC BY-SA 3.0",
      "body": "<p>This error happens because the server sends a 401 (Unauthorized) but does not give a <a href=\"https://en.wikipedia.org/wiki/List_of_HTTP_header_fields#Response_fields\" rel=\"noreferrer\"><code>WWW-Authenticate</code></a> header which is a hint to the client what to do next. The <code>WWW-Authenticate</code> header tells the client, which kind of authentication is needed (either <a href=\"http://en.wikipedia.org/wiki/Basic_access_authentication\" rel=\"noreferrer\">Basic</a> or <a href=\"http://en.wikipedia.org/wiki/Digest_access_authentication\" rel=\"noreferrer\">Digest</a>). This is probably not very useful in headless http clients, but that's how the <a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.2\" rel=\"noreferrer\">HTTP 1.1 RFC is defined</a>. The error occurs because the lib tries to parse the <code>WWW-Authenticate</code> header but can't. </p>\n\n<p>From the RFC:</p>\n\n<blockquote>\n  <p>(...)The response MUST include a WWW-Authenticate header field (section\n  14.47) containing a challenge applicable to the requested resource.(...)</p>\n</blockquote>\n\n<p>Possible solutions if you <strong>can</strong> change the server:</p>\n\n<ul>\n<li>Add a fake \"WWW-Authenticate\" header like: <code>WWW-Authenticate: Basic realm=\"fake\"</code>. This is a mere workaround not a solution, but it should work and the http client is satisfied (<a href=\"https://stackoverflow.com/questions/1748374/http-401-whats-an-appropriate-www-authenticate-header-value\">see here a discussion of what you can put in the header</a>). But beware that some http clients may automatically retry the request resulting in multiple requests (e.g. increments the wrong login count too often). This was observed with the iOS http client.</li>\n<li>As proposed by <em>loudvchar</em> in <a href=\"http://loudvchar.blogspot.com.es/2010/11/avoiding-browser-popup-for-401.html\" rel=\"noreferrer\">this blog</a> to avoid automatic reactions to the challenge like a pop-up login form in a browser, you can use a non-standard authentication method like so: <code>WWW-Authenticate: xBasic realm=\"fake\"</code>. The important point is that the <code>realm</code> has to be included.</li>\n<li>Use HTTP status code <code>403</code> instead of <code>401</code>. It's semantic is not the same and usually when working with login 401 is a correct response (<a href=\"https://stackoverflow.com/questions/3297048/403-forbidden-vs-401-unauthorized-http-responses\">see here for a detailed discussion</a>) but the safer solution in terms of compatibility.</li>\n</ul>\n\n<p>Possible solutions if you <strong>can't</strong> change the server:</p>\n\n<ul>\n<li><p>As @ErikZ wrote in his <a href=\"https://stackoverflow.com/questions/12931791/java-io-ioexception-received-authentication-challenge-is-null-in-ics-4-0-3\">post</a> you could use a try&amp;catch</p>\n\n<pre><code>HttpURLConnection connection = ...;\ntry {\n    // Will throw IOException if server responds with 401.\n    connection.getResponseCode(); \n} catch (IOException e) {\n    // Will return 401, because now connection has the correct internal state.\n    int responsecode = connection.getResponseCode(); \n}\n</code></pre></li>\n<li><p>Use different http client like <a href=\"http://square.github.io/okhttp/\" rel=\"noreferrer\">OkHttp</a></p></li>\n</ul>\n"
    },
    {
      "owner": {
        "account_id": 405484,
        "reputation": 33089,
        "user_id": 774398,
        "user_type": "registered",
        "accept_rate": 83,
        "profile_image": "https://www.gravatar.com/avatar/52ff4dddcaea4c2df64711c8e3d70e23?s=256&d=identicon&r=PG",
        "display_name": "Patrick",
        "link": "https://stackoverflow.com/users/774398/patrick"
      },
      "is_accepted": true,
      "score": 48,
      "last_activity_date": 1489399950,
      "last_edit_date": 1489399950,
      "creation_date": 1396180447,
      "answer_id": 22743664,
      "question_id": 22743663,
      "content_license": "CC BY-SA 3.0",
      "body": "<p><strong>Here is a full example on how to do this <a href=\"http://www.jayway.com/2013/02/26/using-gradle-for-building-android-applications/\" rel=\"noreferrer\">inspired by this post</a>:</strong> <em>(android plugin v.0.9.2 and gradle 1.11 at the time of writing)</em></p>\n\n<p>We are going to define a task that only runs when we build a \"debugCustomBuildType\"</p>\n\n<pre><code>android {\n    ...\n    buildTypes {\n        debugCustomBuildType {\n            //config\n        }\n   }\n}\n</code></pre>\n\n<p>Define the task that should only be executed on a specific builtType/variant/flavor</p>\n\n<pre><code>task doSomethingOnWhenBuildDebugCustom {\n    doLast {\n       //task action\n    }\n}\n</code></pre>\n\n<p>Dynamically set the dependency when the tasks are added by gradle</p>\n\n<pre><code>tasks.whenTaskAdded { task -&gt;\n    if (task.name == 'generateDebugCustomBuildTypeBuildConfig') {\n        task.dependsOn doSomethingOnWhenBuildDebugCustom \n    }\n}\n</code></pre>\n\n<p>Here we use the \"generateBuildConfig\" task, but you can use any task that works for you (<a href=\"http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Manipulating-tasks\" rel=\"noreferrer\">also see official docs</a>)</p>\n\n<ul>\n<li>processManifest</li>\n<li>aidlCompile</li>\n<li>renderscriptCompile</li>\n<li>mergeResourcess.</li>\n<li>mergeAssets</li>\n<li>processResources</li>\n<li>generateBuildConfig</li>\n<li>javaCompile</li>\n<li>processJavaResources </li>\n<li>assemble</li>\n</ul>\n\n<p>Don't forget to use the buildTypeSpecific task (<code>generateBuildConfig</code> vs. <code>generateDebugCustomBuildTypeBuildConfig</code>)</p>\n\n<p>And that's it. It's a shame this workaround isn't well documented because for me this seems like one of the simplest requirements for a build script.</p>\n"
    },
    {
      "owner": {
        "account_id": 405484,
        "reputation": 33089,
        "user_id": 774398,
        "user_type": "registered",
        "accept_rate": 83,
        "profile_image": "https://www.gravatar.com/avatar/52ff4dddcaea4c2df64711c8e3d70e23?s=256&d=identicon&r=PG",
        "display_name": "Patrick",
        "link": "https://stackoverflow.com/users/774398/patrick"
      },
      "is_accepted": false,
      "score": 46,
      "last_activity_date": 1501686456,
      "last_edit_date": 1501686456,
      "creation_date": 1453808786,
      "answer_id": 35013138,
      "question_id": 30719047,
      "content_license": "CC BY-SA 3.0",
      "body": "<p>Here is a nice and easy method to check the current permission status:</p>\n\n<pre><code>    @Retention(RetentionPolicy.SOURCE)\n    @IntDef({GRANTED, DENIED, BLOCKED_OR_NEVER_ASKED })\n    public @interface PermissionStatus {}\n\n    public static final int GRANTED = 0;\n    public static final int DENIED = 1;\n    public static final int BLOCKED_OR_NEVER_ASKED = 2;\n\n    @PermissionStatus \n    public static int getPermissionStatus(Activity activity, String androidPermissionName) {\n        if(ContextCompat.checkSelfPermission(activity, androidPermissionName) != PackageManager.PERMISSION_GRANTED) {\n            if(!ActivityCompat.shouldShowRequestPermissionRationale(activity, androidPermissionName)){\n                return BLOCKED_OR_NEVER_ASKED;\n            }\n            return DENIED;\n        }\n        return GRANTED;\n    }\n</code></pre>\n\n<p><em>Caveat: returns BLOCKED_OR_NEVER_ASKED the first app start, before the user accepted/denied the permission through the user prompt (on sdk 23+ devices)</em></p>\n\n<p><strong>Update:</strong></p>\n\n<p>The Android support library now also seems to have a very similar class <code>android.support.v4.content.PermissionChecker</code> which contains a <code>checkSelfPermission()</code> which returns:</p>\n\n<pre><code>public static final int PERMISSION_GRANTED = 0;\npublic static final int PERMISSION_DENIED = -1;\npublic static final int PERMISSION_DENIED_APP_OP = -2;\n</code></pre>\n"
    },
    {
      "owner": {
        "account_id": 405484,
        "reputation": 33089,
        "user_id": 774398,
        "user_type": "registered",
        "accept_rate": 83,
        "profile_image": "https://www.gravatar.com/avatar/52ff4dddcaea4c2df64711c8e3d70e23?s=256&d=identicon&r=PG",
        "display_name": "Patrick",
        "link": "https://stackoverflow.com/users/774398/patrick"
      },
      "is_accepted": false,
      "score": 43,
      "last_activity_date": 1485109360,
      "last_edit_date": 1495542383,
      "creation_date": 1476565518,
      "answer_id": 40064199,
      "question_id": 4853011,
      "content_license": "CC BY-SA 3.0",
      "body": "<p>Here is a guide on how to manually sign an APK. It includes info about the new <code>apk-signer</code> introduced in <code>build-tools 24.0.3</code> <em>(10/2016)</em></p>\n\n<h1>Automated Process:</h1>\n\n<p>Use this tool (uses the new apksigner from Google):</p>\n\n<p><a href=\"https://github.com/patrickfav/uber-apk-signer\" rel=\"noreferrer\">https://github.com/patrickfav/uber-apk-signer</a> </p>\n\n<p><sup>Disclaimer: Im the developer :)</sup></p>\n\n<h1>Manual Process:</h1>\n\n<h2>Step 1: Generate Keystore (only once)</h2>\n\n<p>You need to generate a keystore once and use it to sign your <code>unsigned</code> apk.\nUse the <a href=\"https://docs.oracle.com/javase/8/docs/technotes/tools/unix/keytool.html\" rel=\"noreferrer\"><code>keytool</code></a> <a href=\"https://stackoverflow.com/questions/4830253/where-is-the-keytool-application\">provided by the JDK</a> found in <code>%JAVA_HOME%/bin/</code></p>\n\n<pre><code>keytool -genkey -v -keystore my.keystore -keyalg RSA -keysize 2048 -validity 10000 -alias app\n</code></pre>\n\n<h2>Step 2 or 4: Zipalign</h2>\n\n<p><a href=\"https://developer.android.com/studio/command-line/zipalign.html\" rel=\"noreferrer\"><code>zipalign</code></a> <a href=\"https://stackoverflow.com/questions/24442213/cannot-find-zip-align-when-publishing-app\">which is a tool provided by the Android SDK</a> found in e.g. <code>%ANDROID_HOME%/sdk/build-tools/24.0.2/</code> is a mandatory optimzation step if you want to upload the apk to the Play Store.</p>\n\n<pre><code>zipalign -p 4 my.apk my-aligned.apk\n</code></pre>\n\n<p><strong>Note:</strong> when using the old <code>jarsigner</code> you need to zipalign <em>AFTER</em> signing. When using the new <code>apksigner</code> method you do it <em>BEFORE</em> signing (confusing, I know). <a href=\"https://developer.android.com/studio/releases/build-tools.html\" rel=\"noreferrer\">Invoking zipalign before apksigner works fine</a> because apksigner preserves APK alignment and compression (unlike jarsigner).</p>\n\n<p>You can <em>verify</em> the alignment with</p>\n\n<pre><code>zipalign -c 4 my-aligned.apk\n</code></pre>\n\n<h2>Step 3: Sign &amp; Verify</h2>\n\n<h3>Using build-tools 24.0.2 and older</h3>\n\n<p>Use <a href=\"http://docs.oracle.com/javase/7/docs/technotes/tools/windows/jarsigner.html\" rel=\"noreferrer\"><code>jarsigner</code></a> which, like the keytool, <a href=\"https://stackoverflow.com/questions/12135699/where-is-jarsigner\">comes with the JDK distribution</a> found in  <code>%JAVA_HOME%/bin/</code> and use it like so:</p>\n\n<pre><code>jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore my.keystore my-app.apk my_alias_name\n</code></pre>\n\n<p>and can be verified with</p>\n\n<pre><code>jarsigner -verify -verbose my_application.apk\n</code></pre>\n\n<h3>Using build-tools 24.0.3 and newer</h3>\n\n<p>Android 7.0 introduces APK Signature Scheme v2, a new app-signing scheme that offers faster app install times and more protection against unauthorized alterations to APK files (See <a href=\"https://developer.android.com/about/versions/nougat/android-7.0.html#apk_signature_v2\" rel=\"noreferrer\">here</a> and <a href=\"https://source.android.com/security/apksigning/v2.html\" rel=\"noreferrer\">here</a> for more details). Threfore Google implemented their <a href=\"https://developer.android.com/studio/command-line/apksigner.html\" rel=\"noreferrer\">own apk signer called <code>apksigner</code></a> (duh!)\nThe script file can be found in <code>%ANDROID_HOME%/sdk/build-tools/24.0.3/</code> (the .jar is in the <code>/lib</code> subfolder). Use it like this</p>\n\n<pre><code>apksigner sign --ks my.keystore my-app.apk --ks-key-alias alias_name\n</code></pre>\n\n<p>and can be verified with</p>\n\n<pre><code>apksigner verify my-app.apk\n</code></pre>\n\n<p><a href=\"https://developer.android.com/studio/publish/app-signing.html#signing-manually\" rel=\"noreferrer\">The official documentation can be found here.</a></p>\n"
    },
    {
      "owner": {
        "account_id": 405484,
        "reputation": 33089,
        "user_id": 774398,
        "user_type": "registered",
        "accept_rate": 83,
        "profile_image": "https://www.gravatar.com/avatar/52ff4dddcaea4c2df64711c8e3d70e23?s=256&d=identicon&r=PG",
        "display_name": "Patrick",
        "link": "https://stackoverflow.com/users/774398/patrick"
      },
      "is_accepted": false,
      "score": 40,
      "last_activity_date": 1480505676,
      "last_edit_date": 1480505676,
      "creation_date": 1480505326,
      "answer_id": 40887218,
      "question_id": 24777497,
      "content_license": "CC BY-SA 3.0",
      "body": "<p>Newer (I guess 2.x+) versions of Android Studio have this option in the main settings:</p>\n\n<p><a href=\"https://www.jetbrains.com/help/idea/2016.3/accessing-settings.html\" rel=\"noreferrer\">Open the settings</a> with one of the following actions:</p>\n\n<ul>\n<li>Press <code>Ctrl+Alt+S</code>.</li>\n<li>On the main menu, choose <code>File | Settings</code> for Windows and Linux or <code>IntelliJ IDEA | Preferences</code> for OS X</li>\n<li>Press <code>Ctrl+Shift+A</code>, type settings and press <code>Enter</code>.</li>\n</ul>\n\n<p>Then navigate to the following sub-menu:</p>\n\n<pre><code>Editor -&gt; Layout Editor -&gt; \"Prefer XML editor\"\n</code></pre>\n\n<p><a href=\"https://i.stack.imgur.com/h6fhM.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/h6fhM.png\" alt=\"Screenshot of the Preferences\"></a></p>\n"
    },
    {
      "owner": {
        "account_id": 405484,
        "reputation": 33089,
        "user_id": 774398,
        "user_type": "registered",
        "accept_rate": 83,
        "profile_image": "https://www.gravatar.com/avatar/52ff4dddcaea4c2df64711c8e3d70e23?s=256&d=identicon&r=PG",
        "display_name": "Patrick",
        "link": "https://stackoverflow.com/users/774398/patrick"
      },
      "is_accepted": false,
      "score": 36,
      "last_activity_date": 1475951798,
      "last_edit_date": 1475951798,
      "creation_date": 1368611012,
      "answer_id": 16561732,
      "question_id": 6438061,
      "content_license": "CC BY-SA 3.0",
      "body": "<p>I wanted the scrollView to scroll directly after onCreateView() (not after e.g. a button click). To get it to work I needed to use a ViewTreeObserver:</p>\n\n<pre><code>mScrollView.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() {\n        @Override\n        public void onGlobalLayout() {\n            mScrollView.post(new Runnable() {\n                public void run() {\n                    mScrollView.fullScroll(View.FOCUS_DOWN);\n                }\n            });\n        }\n    });\n</code></pre>\n\n<p>But beware that this will be called everytime something gets layouted (e.g if you set a view invisible or similar) so don't forget to remove this listener if you don't need it anymore with:</p>\n\n<p><code>public void removeGlobalOnLayoutListener (ViewTreeObserver.OnGlobalLayoutListener victim)</code> on SDK Lvl &lt; 16</p>\n\n<p>or </p>\n\n<p><code>public void removeOnGlobalLayoutListener (ViewTreeObserver.OnGlobalLayoutListener victim)</code> in SDK Lvl >= 16</p>\n"
    },
    {
      "owner": {
        "account_id": 405484,
        "reputation": 33089,
        "user_id": 774398,
        "user_type": "registered",
        "accept_rate": 83,
        "profile_image": "https://www.gravatar.com/avatar/52ff4dddcaea4c2df64711c8e3d70e23?s=256&d=identicon&r=PG",
        "display_name": "Patrick",
        "link": "https://stackoverflow.com/users/774398/patrick"
      },
      "is_accepted": false,
      "score": 36,
      "last_activity_date": 1512316027,
      "last_edit_date": 1512316027,
      "creation_date": 1424442169,
      "answer_id": 28631202,
      "question_id": 12949690,
      "content_license": "CC BY-SA 3.0",
      "body": "<h2>Using Specific Datastructures</h2>\n\n<p>There are various data structures which are optimized for adding elements at the first index. Mind though, that if you convert your collection to one of these, the conversation will probably need a time and space complexity of <code>O(n)</code> </p>\n\n<h3>Deque</h3>\n\n<p>The JDK includes the <a href=\"https://docs.oracle.com/javase/7/docs/api/java/util/Deque.html\" rel=\"noreferrer\"><code>Deque</code></a> structure which offers methods like <a href=\"https://docs.oracle.com/javase/7/docs/api/java/util/Deque.html#addFirst(E)\" rel=\"noreferrer\"><code>addFirst(e)</code></a> and <a href=\"http://offerFirst(e)\" rel=\"noreferrer\"><code>offerFirst(e)</code></a></p>\n\n<pre><code>Deque&lt;String&gt; deque = new LinkedList&lt;&gt;();\ndeque.add(\"two\");\ndeque.add(\"one\");\ndeque.addFirst(\"three\");\n//prints \"three\", \"two\", \"one\"\n</code></pre>\n\n<h3>Analysis</h3>\n\n<p>Space and time complexity of insertion is with <code>LinkedList</code> constant (<code>O(1)</code>). See the <a href=\"http://bigocheatsheet.com/\" rel=\"noreferrer\">Big-O cheatsheet</a>.</p>\n\n<h2>Reversing the List</h2>\n\n<p>A very easy but inefficient method is to use reverse:</p>\n\n<pre><code> Collections.reverse(list);\n list.add(elementForTop);\n Collections.reverse(list);\n</code></pre>\n\n<p><a href=\"https://stackoverflow.com/a/24011264/774398\">If you use Java 8 streams, this answer might interest you.</a></p>\n\n<h3>Analysis</h3>\n\n<ul>\n<li>Time Complexity: <code>O(n)</code></li>\n<li>Space Complexity: <code>O(1)</code></li>\n</ul>\n\n<p>Looking at the <a href=\"http://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/6-b14/java/util/Collections.java#Collections.reverse%28java.util.List%29\" rel=\"noreferrer\">JDK implementation</a> this has a <code>O(n)</code> time complexity so only suitable for very small lists.</p>\n"
    },
    {
      "owner": {
        "account_id": 405484,
        "reputation": 33089,
        "user_id": 774398,
        "user_type": "registered",
        "accept_rate": 83,
        "profile_image": "https://www.gravatar.com/avatar/52ff4dddcaea4c2df64711c8e3d70e23?s=256&d=identicon&r=PG",
        "display_name": "Patrick",
        "link": "https://stackoverflow.com/users/774398/patrick"
      },
      "is_accepted": true,
      "score": 33,
      "last_activity_date": 1497801731,
      "last_edit_date": 1497801731,
      "creation_date": 1400069547,
      "answer_id": 23654407,
      "question_id": 22540120,
      "content_license": "CC BY-SA 3.0",
      "body": "<p>If you want verbose Log from the volley library, you have to use adb</p>\n\n<pre><code>adb -s 42f63b0de7318fe1 shell setprop log.tag.Volley VERBOSE\n</code></pre>\n\n<p>where \"<code>42f63b0de7318fe1</code>\" is your device id which you will get by</p>\n\n<pre><code>adb devices\n</code></pre>\n\n<p>If you want to persist this setting use</p>\n\n<pre><code>adb -s 42f63b0de7318fe1 shell setprop persist.log.tag.Volley VERBOSE\n</code></pre>\n\n<p>If you have only 1 device you can omit the <code>-s</code> argument</p>\n\n<p>see also <a href=\"https://stackoverflow.com/questions/17797397/how-to-set-adt-system-property-in-eclipse-so-it-always-runs\">How to set ADT system property in eclipse so it always runs</a></p>\n\n<p>Kill and restart your app to apply the setting.</p>\n"
    },
    {
      "owner": {
        "account_id": 405484,
        "reputation": 33089,
        "user_id": 774398,
        "user_type": "registered",
        "accept_rate": 83,
        "profile_image": "https://www.gravatar.com/avatar/52ff4dddcaea4c2df64711c8e3d70e23?s=256&d=identicon&r=PG",
        "display_name": "Patrick",
        "link": "https://stackoverflow.com/users/774398/patrick"
      },
      "is_accepted": true,
      "score": 33,
      "last_activity_date": 1591878586,
      "last_edit_date": 1592644375,
      "creation_date": 1411842871,
      "answer_id": 26077852,
      "question_id": 26076292,
      "content_license": "CC BY-SA 4.0",
      "body": "<p><em>If you are interested in state of the art implementation, check out my project here <a href=\"https://github.com/patrickfav/armadillo\" rel=\"noreferrer\">https://github.com/patrickfav/armadillo</a> which may have some interesseting design principles relevant to this discussion.</em></p>\n<hr />\n<h1>Discussion 1: The Attacker is Another App</h1>\n<p>There are different points to consider:</p>\n<h2>Shared Preference on an unrooted Device</h2>\n<p>The data is safe here on the code level. It can only be accessed through the app (in malice or normal manner)</p>\n<h2>Encrypted Shared Preference on a unrooted Device</h2>\n<p>Same as above. Your data is safe. No difference in security level, it's just as safe or unsafe as it would be unencrypted (but slightly obfuscated).</p>\n<h2>Shared Preference on a rooted Device</h2>\n<p>The data can be accessed and manipulated by any App. But you have to consider that only a very small percentage (I guess under 1-2%, but there is no reliable data on the <em>interweb</em>) of devices are rooted and if a user roots his device he/she deliberately leaves himself vulnerable. This is not an Android system setting, if you root, you are responsible for the consequences.</p>\n<h2>Encrypted Shared Preference on a rooted Device</h2>\n<p>So you have the option to encrypt your data. There a ready <a href=\"http://www.codeproject.com/Articles/549119/Encryption-Wrapper-for-Android-SharedPreferences\" rel=\"noreferrer\">solutions for this</a>. But the problem is to keep the key secret. A hardcoded key in source code can easily be decompiled (even with byte code obfuscator like ProGuard). A per-app generated key has to be saved somewhere, and in the end on a rooted device, it can be accessed irrelevant of the location (shared pref, SQL, file). A server side per user key that is only saved in RAM is a little more secure, but degrades usability as you need to make a server request the first time the app is started or every time it's garbage collected. This may interfere with offline capability.</p>\n<p>Aside from the last method, encrypting your shared preference hardly gives any real security enhancements.</p>\n<h2>Implication of developing a malicious app</h2>\n<p>Since April '14 Google has a <a href=\"http://www.androidpolice.com/2014/04/10/google-is-rolling-out-constant-on-device-scanning-for-verify-apps-feature/\" rel=\"noreferrer\">malware scanner embedded in the play services</a> on the device (also in the play store server side) that detects malice apps and its definition is frequently updated (at least every 6 weeks as is the release cycle of the play store app) and works with every Google Android 2.3+.</p>\n<p>As a potential developer of a malicious app that reads your data I have to consider that my app only works on a small percentage of devices and then also only a brief period and my main distribution channel would be to make people download the APK and manually install the app and hopefully won't be recognized by the malware scanner immediately, which combined is a very unlikely scenario. This would make me inclined to use other means of intrusion which have a better effort-to-return ratio.</p>\n<p>I guess that's the reason there are still only a few malice apps for Android and no widespread &quot;infection&quot; at least I know of (middle 2015).</p>\n<h2>Should an App store sensitive data?</h2>\n<p>I would rethink if your design fits your requirements. Usually you want to store the least sensitive data you can and only get it from the server if you need it and then only keep it in RAM as long as you need it. Data that is potentially very damaging therefore should not be saved persistently on the device (if possible). As we discussed data on your Android phone cannot be secured in a way that satisfies every security requirement.</p>\n<p>Aside from that, you also have to consider to secure the data on the UI level or otherwise anybody could just take your phone and access the nuclear bomb codes through the app.</p>\n<p><strong>tl;dr</strong></p>\n<ul>\n<li>Persist only the sensitive data on your phone that you essentially need to keep a reasonable usability of your app. Everything else belongs in the RAM (as e.g. a object member) and should be fetched on demand and kept as brief as possible</li>\n<li>The existence of an effective malware for your app is unlikely</li>\n<li>Shared Preference is safe on all devices that are not deliberately made vulnerable. You have no influence on that so you cannot be held responsible as it is not a standard feature of the phone</li>\n<li>Encrypting your data on a android phone hardly gives any real security enhancements</li>\n</ul>\n<h1>Discussion 2: The Attacker is the Device Owner</h1>\n<h2>Protecting dynamic App configuration - or how to protect yourself from the device owner</h2>\n<p>There might be an additional use case where manually encrypting data makes a lot of sense: If you want to make it harder to read and alter your app's internal configuration. A simple example would be: you have a boolean flag, when a user e.g. &quot;likes&quot; your FB page, will disable ads. If you just store a <code>true</code> or <code>false</code> it is trivial for the device owner to change that. For this scenario a good &quot;obfuscation&quot; might be enough for most attackers. Be aware that your encryption scheme must be <a href=\"https://en.wikipedia.org/wiki/Authenticated_encryption\" rel=\"noreferrer\">authenticated</a> meaning it should not only encrypt but leave a tag to check if the data has been modified. It would also be best to make it non-deterministic and device depended because otherwise an attacker could just copy the value from another device. For sample <a href=\"https://github.com/patrickfav/armadillo\" rel=\"noreferrer\">implementation of this approach see here</a>.</p>\n<h2>Ways of improving protection against device owner</h2>\n<ul>\n<li>See <a href=\"https://crypto.stackexchange.com/questions/386/differences-between-white-box-cryptography-and-code-obfuscation\">whitebox crypto</a> for a solution on how to encrypt data on vulnerable devices.</li>\n<li><a href=\"https://developer.android.com/training/articles/keystore\" rel=\"noreferrer\">Android Keystore System</a></li>\n</ul>\n<hr />\n<h1>The 2017 Update with Android 5/6 and the Area of the Android Keystore System</h1>\n<p>Inofficially released with <a href=\"https://nelenkov.blogspot.com/2013/08/credential-storage-enhancements-android-43.html\" rel=\"noreferrer\">Android 4.3</a>, with it's first public release with Android 5 and vastly improved API and capabilities with <a href=\"https://developer.android.com/about/versions/marshmallow/android-6.0\" rel=\"noreferrer\">Android 6</a>, the <a href=\"https://developer.android.com/training/articles/keystore\" rel=\"noreferrer\">Android Keystore System</a> made it possible to encrypt data and store keys with the device's secure hardware platform. On the face, this makes for a very strong concept which makes it impossible even for attackers with the device in hand to decrypt your data. In it's strongest configuration the Android Keystore System only decrypts, if the user either unlocked the screen or provided his fingerprint. This is not only more user friendly by not introducing additional passwords, but also does exactly what you want: The data is encrypted if the phone is locked (not only if it is off) und decrypted when the user unlocks her phone.</p>\n<p>Unfortunately this concept has a major flaw: it is very unreliable. You are at the mercy of device fragmentation with major manufacturer providing unstable and non API confirm implementations. Drivers and/or SoC themselves often have major bugs and behavior might not what you want (e.g. by <a href=\"https://issuetracker.google.com/issues/36983155\" rel=\"noreferrer\">deleting your keys</a> when the user changes or deletes their lock screen). Even different Android versions behave differently. These observations were made by me during a project with very high requirements for persisting sensitive data during the time of 2017-2018 (lets say I added couple of Android Bug Tickets - which all got ignored of course). It is possible that newer devices and Android implementations are better now, but until I see otherwise I would be aware.</p>\n"
    },
    {
      "owner": {
        "account_id": 405484,
        "reputation": 33089,
        "user_id": 774398,
        "user_type": "registered",
        "accept_rate": 83,
        "profile_image": "https://www.gravatar.com/avatar/52ff4dddcaea4c2df64711c8e3d70e23?s=256&d=identicon&r=PG",
        "display_name": "Patrick",
        "link": "https://stackoverflow.com/users/774398/patrick"
      },
      "is_accepted": false,
      "score": 33,
      "last_activity_date": 1509629899,
      "last_edit_date": 1509629899,
      "creation_date": 1497907288,
      "answer_id": 44640156,
      "question_id": 44390590,
      "content_license": "CC BY-SA 3.0",
      "body": "<p>With the new plugin, the variant-aware dependency resolution</p>\n\n<pre><code>implementation project(':MyLib')\n</code></pre>\n\n<p>needs to have exact matching build types. <a href=\"https://developer.android.com/studio/preview/features/new-android-plugin-migration.html#variant_dependencies\" rel=\"noreferrer\">The migration guide describes this</a></p>\n\n<blockquote>\n  <p>For instance, it is not possible to make a 'debug' variant consume a\n  'release' variant through this mechanism because the producer and\n  consumer would not match. (In this case, the name 'debug' refers to\n  the published configuration object mentioned above in the Publishing\n  Dependencies section.) Now that we publish two configurations, one for\n  compiling and one for runtime, this old way of selecting one\n  configuration really doesn't work anymore.</p>\n</blockquote>\n\n<p>So the old method of </p>\n\n<pre><code>releaseCompile project(path: ':foo', configuration: 'debug')\n</code></pre>\n\n<p>will not work anymore.</p>\n\n<h2>Example</h2>\n\n<p>With your example this would look like this:</p>\n\n<p>In app <code>build.gradle</code>:</p>\n\n<pre><code>apply plugin: 'com.android.application'\n\nandroid {\n  buildTypes {\n    debug {}\n    releaseApp {}\n    releaseSdk {}\n  }\n  ...\n  dependencies {\n    implementation project(':MyLib')\n  }\n}\n</code></pre>\n\n<p>In module/lib 'MyLib' <code>build.gradle</code>:</p>\n\n<pre><code>apply plugin: 'com.android.library'\n\nandroid {\n  buildTypes {\n    debug {}\n    releaseApp {}\n    releaseSdk {}\n  }\n}\n</code></pre>\n\n<p>Therefore the build type must <em>exactly</em> match, no more no less.</p>\n\n<h2>Using Build-Type Fallbacks</h2>\n\n<p>A new feature called \"matchingFallbacks\" can be used to define default buildtypes if a sub-module does not define the buildtype. </p>\n\n<blockquote>\n  <p>Use matchingFallbacks to specify alternative matches for a given build type (...)</p>\n</blockquote>\n\n<p>For example if  module/lib 'MyLib' gradle would look like this:</p>\n\n<pre><code>apply plugin: 'com.android.library'\n\nandroid {\n  buildTypes {\n    debug {}\n    releaseLib {}\n  }\n}\n</code></pre>\n\n<p>You could define the following in your app <code>build.gradle</code>:</p>\n\n<pre><code>apply plugin: 'com.android.application'\n\nandroid {\n  buildTypes {\n    debug {}\n    releaseApp {\n        ...\n        matchingFallbacks = ['releaseLib']\n    }\n    releaseSdk {\n        ...\n        matchingFallbacks = ['releaseLib']\n    }\n  }\n  ...\n  dependencies {\n    implementation project(':MyLib')\n  }\n}\n</code></pre>\n\n<h2>Missing Flavor Dimensions</h2>\n\n<blockquote>\n  <p>Use missingDimensionStrategy in the defaultConfig block to specify the\n  default flavor the plugin should select from each missing dimension</p>\n</blockquote>\n\n<pre><code>android {\n    defaultConfig {\n        missingDimensionStrategy 'minApi', 'minApi18', 'minApi23'\n        ...\n    }\n}\n</code></pre>\n"
    },
    {
      "owner": {
        "account_id": 405484,
        "reputation": 33089,
        "user_id": 774398,
        "user_type": "registered",
        "accept_rate": 83,
        "profile_image": "https://www.gravatar.com/avatar/52ff4dddcaea4c2df64711c8e3d70e23?s=256&d=identicon&r=PG",
        "display_name": "Patrick",
        "link": "https://stackoverflow.com/users/774398/patrick"
      },
      "is_accepted": true,
      "score": 31,
      "last_activity_date": 1508691446,
      "creation_date": 1508691446,
      "answer_id": 46876792,
      "question_id": 30952112,
      "content_license": "CC BY-SA 3.0",
      "body": "<p>To get the current's module name you can just access Gradle's <code>project</code> object</p>\n\n<pre><code>project.name\n</code></pre>\n\n<p>Will return, for the module <code>app</code></p>\n\n<blockquote>\n  <p>app</p>\n</blockquote>\n\n<p>See: <a href=\"https://docs.gradle.org/current/userguide/writing_build_scripts.html\" rel=\"noreferrer\">https://docs.gradle.org/current/userguide/writing_build_scripts.html</a></p>\n"
    },
    {
      "owner": {
        "account_id": 405484,
        "reputation": 33089,
        "user_id": 774398,
        "user_type": "registered",
        "accept_rate": 83,
        "profile_image": "https://www.gravatar.com/avatar/52ff4dddcaea4c2df64711c8e3d70e23?s=256&d=identicon&r=PG",
        "display_name": "Patrick",
        "link": "https://stackoverflow.com/users/774398/patrick"
      },
      "is_accepted": false,
      "score": 28,
      "last_activity_date": 1574014599,
      "creation_date": 1574014599,
      "answer_id": 58903654,
      "question_id": 37066216,
      "content_license": "CC BY-SA 4.0",
      "body": "<p>Here is a solution without any required dependencies (<em>Apacha et al.</em>) requiring only JDK 8+:</p>\n\n<pre><code>import java.util.Base64;\nimport java.nio.file.Files;\n\nprivate static String encodeFileToBase64(File file) {\n    try {\n        byte[] fileContent = Files.readAllBytes(file.toPath());\n        return Base64.getEncoder().encodeToString(fileContent);\n    } catch (IOException e) {\n        throw new IllegalStateException(\"could not read file \" + file, e);\n    }\n}\n</code></pre>\n"
    },
    {
      "owner": {
        "account_id": 405484,
        "reputation": 33089,
        "user_id": 774398,
        "user_type": "registered",
        "accept_rate": 83,
        "profile_image": "https://www.gravatar.com/avatar/52ff4dddcaea4c2df64711c8e3d70e23?s=256&d=identicon&r=PG",
        "display_name": "Patrick",
        "link": "https://stackoverflow.com/users/774398/patrick"
      },
      "is_accepted": true,
      "score": 26,
      "last_activity_date": 1476097031,
      "last_edit_date": 1476097031,
      "creation_date": 1372516065,
      "answer_id": 17381211,
      "question_id": 17324587,
      "content_license": "CC BY-SA 3.0",
      "body": "<p>Your goal cannot be stably achieved by your approach. If you use an Handler's <code>postDelayed()</code> method and the CPU goes to  deepsleep, the ms counter will stop and will only continue if the CPU wakes up again.</p>\n\n<p><a href=\"http://binarybuffer.com/2012/07/executing-scheduled-periodic-tasks-in-android\" rel=\"noreferrer\">See this for more detail.</a></p>\n\n<p>So if you want to have some kind of a cron job you will need to use wakelock.\nFortunately there is a Service implementation that does exactly that: <a href=\"https://github.com/commonsguy/cwac-wakeful\" rel=\"noreferrer\">Wakeful IntentService</a></p>\n\n<p>From the doc:</p>\n\n<blockquote>\n  <p>The recommended pattern for Android's equivalent to cron jobs and Windows scheduled tasks is to use AlarmManager. This works well when coupled with an IntentService, as the service will do its work on a background thread and shut down when there is no more work to do. There's one small problem: IntentService does nothing to keep the device awake. If the alarm was a WAKEUP variant, the phone will only stay awake on its own while the BroadcastReceiver handling the alarm is in its onReceive() method. Otherwise, the phone may fall back asleep.  WakefulIntentService attempts to combat this by combining the ease of IntentService with a partial WakeLock.</p>\n</blockquote>\n"
    },
    {
      "owner": {
        "account_id": 405484,
        "reputation": 33089,
        "user_id": 774398,
        "user_type": "registered",
        "accept_rate": 83,
        "profile_image": "https://www.gravatar.com/avatar/52ff4dddcaea4c2df64711c8e3d70e23?s=256&d=identicon&r=PG",
        "display_name": "Patrick",
        "link": "https://stackoverflow.com/users/774398/patrick"
      },
      "is_accepted": true,
      "score": 26,
      "last_activity_date": 1522942075,
      "last_edit_date": 1522942075,
      "creation_date": 1396185053,
      "answer_id": 22744378,
      "question_id": 22744148,
      "content_license": "CC BY-SA 3.0",
      "body": "<p>You are probably confusing 2 things:</p>\n\n<ul>\n<li>wating queue size</li>\n<li>max parallel network requests</li>\n</ul>\n\n<p><strong>For waiting queue size:</strong></p>\n\n<pre><code>/** The queue of requests that are actually going out to the network. */\nprivate final PriorityBlockingQueue&lt;Request&lt;?&gt;&gt; mNetworkQueue =\n    new PriorityBlockingQueue&lt;Request&lt;?&gt;&gt;();\n</code></pre>\n\n<p>Volley uses a PriorityBlockingQueue which itself uses a PriorityQueue with a initial capacity of 11, but will automatically grow, so there should be no reasonable limit.</p>\n\n<pre><code>private static final int DEFAULT_INITIAL_CAPACITY = 11;\n...\npublic PriorityQueue() {\n    this(DEFAULT_INITIAL_CAPACITY, null);\n}\n</code></pre>\n\n<p><strong>For max parallel network requests:</strong></p>\n\n<pre><code>RequestQueue requestQueue = Volley.newRequestQueue(this);\n</code></pre>\n\n<p>will call</p>\n\n<pre><code>RequestQueue queue = new RequestQueue(new DiskBasedCache(cacheDir), network);\n</code></pre>\n\n<p>and this calls</p>\n\n<pre><code>public RequestQueue(Cache cache, Network network) {\n        this(cache, network, DEFAULT_NETWORK_THREAD_POOL_SIZE);\n    }\n</code></pre>\n\n<p>and <code>DEFAULT_NETWORK_THREAD_POOL_SIZE</code> is</p>\n\n<pre><code>private static final int DEFAULT_NETWORK_THREAD_POOL_SIZE = 4;\n</code></pre>\n\n<p>So by default there are 4 concurrent threads handling the requests (so max 4 request at the same time).</p>\n\n<hr>\n\n<p>Waiting queue size is <code>Integer.MAX</code> ie. basically limitless; while max parallel network requests are 4, which can be changed with the RequestQueue constructor.</p>\n"
    },
    {
      "owner": {
        "account_id": 405484,
        "reputation": 33089,
        "user_id": 774398,
        "user_type": "registered",
        "accept_rate": 83,
        "profile_image": "https://www.gravatar.com/avatar/52ff4dddcaea4c2df64711c8e3d70e23?s=256&d=identicon&r=PG",
        "display_name": "Patrick",
        "link": "https://stackoverflow.com/users/774398/patrick"
      },
      "is_accepted": true,
      "score": 23,
      "last_activity_date": 1475952158,
      "last_edit_date": 1475952158,
      "creation_date": 1371134687,
      "answer_id": 17090029,
      "question_id": 17089927,
      "content_license": "CC BY-SA 3.0",
      "body": "<h2>CSS</h2>\n\n<p>CSS 3 has a blur filter (<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/filter\" rel=\"nofollow noreferrer\"><strong>only webkit at the moment Nov 2014</strong></a>): </p>\n\n<pre><code>-webkit-filter: blur(3px); /*chrome (android), safari (ios), opera*/\n</code></pre>\n\n<p>IE 4-9 supports a non-standard filter</p>\n\n<pre><code>filter:progid:DXImageTransform.Microsoft.Blur(PixelRadius='3')\n</code></pre>\n\n<p><a href=\"http://html5-demos.appspot.com/static/css/filters/index.html\" rel=\"nofollow noreferrer\">See some nice demo for the blur and other filters here.</a></p>\n\n<p><img src=\"https://i.stack.imgur.com/kM4tz.png\" alt=\"webkit CSS filter blur example\"></p>\n\n<p>For future reference <a href=\"http://caniuse.com/#feat=css-filters\" rel=\"nofollow noreferrer\">here is the compatibility table for CSS filter</a>. Firefox seems to be getting the feature in v35+ while even IE11 does not seem to have any compatibility.</p>\n\n<h2>SVG</h2>\n\n<p>An alternative is using svg (<a href=\"http://caniuse.com/#feat=svg\" rel=\"nofollow noreferrer\">safe for basically IE9 and up</a>):</p>\n\n<pre><code>filter: url(blur.svg#blur);\n</code></pre>\n\n<p>SVG:</p>\n\n<pre><code>&lt;svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\"&gt;\n   &lt;filter id=\"blur\"&gt;\n       &lt;feGaussianBlur stdDeviation=\"3\" /&gt;\n   &lt;/filter&gt;\n&lt;/svg&gt; \n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/for3st/829k0nkh/\" rel=\"nofollow noreferrer\">jsFiddle Demo</a></p>\n\n<h2>Javascript</h2>\n\n<p>You will achieve the highest browser compatibility with javascript, but usually the slowest performance and added complexity to your js.</p>\n\n<ul>\n<li><a href=\"http://www.blurjs.com/\" rel=\"nofollow noreferrer\">http://www.blurjs.com/</a> (jquery plugin, <a href=\"http://caniuse.com/#feat=canvas\" rel=\"nofollow noreferrer\">canvas solution so IE9+, FF, Chrome support</a>)</li>\n<li><a href=\"http://nbartlomiej.github.io/foggy/\" rel=\"nofollow noreferrer\">http://nbartlomiej.github.io/foggy/</a> (jquery plugin IE8+, FF,Chrome support)</li>\n</ul>\n"
    },
    {
      "owner": {
        "account_id": 405484,
        "reputation": 33089,
        "user_id": 774398,
        "user_type": "registered",
        "accept_rate": 83,
        "profile_image": "https://www.gravatar.com/avatar/52ff4dddcaea4c2df64711c8e3d70e23?s=256&d=identicon&r=PG",
        "display_name": "Patrick",
        "link": "https://stackoverflow.com/users/774398/patrick"
      },
      "is_accepted": false,
      "score": 22,
      "last_activity_date": 1409925781,
      "last_edit_date": 1409925781,
      "creation_date": 1401479375,
      "answer_id": 23962406,
      "question_id": 2407565,
      "content_license": "CC BY-SA 3.0",
      "body": "<p>Here is the 2014 version that utilizes KitKat's <a href=\"http://developer.android.com/reference/android/graphics/Bitmap.html#getAllocationByteCount()\"><code>getAllocationByteCount()</code></a> and is written so that the compiler understands the version logic (so <code>@TargetApi</code> is not needed)</p>\n\n<pre><code>/**\n * returns the bytesize of the give bitmap\n */\npublic static int byteSizeOf(Bitmap bitmap) {\n    if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT) {\n        return bitmap.getAllocationByteCount();\n    } else if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.HONEYCOMB_MR1) {\n        return bitmap.getByteCount();\n    } else {\n        return bitmap.getRowBytes() * bitmap.getHeight();\n    }\n}\n</code></pre>\n\n<p>Note that the result of <a href=\"http://developer.android.com/reference/android/graphics/Bitmap.html#getAllocationByteCount()\"><code>getAllocationByteCount()</code></a> <em>can</em> be larger than the result of <a href=\"http://developer.android.com/reference/android/graphics/Bitmap.html#getByteCount()\"><code>getByteCount()</code></a> if a bitmap is reused to decode other bitmaps of smaller size, or by manual reconfiguration.</p>\n"
    },
    {
      "owner": {
        "account_id": 405484,
        "reputation": 33089,
        "user_id": 774398,
        "user_type": "registered",
        "accept_rate": 83,
        "profile_image": "https://www.gravatar.com/avatar/52ff4dddcaea4c2df64711c8e3d70e23?s=256&d=identicon&r=PG",
        "display_name": "Patrick",
        "link": "https://stackoverflow.com/users/774398/patrick"
      },
      "is_accepted": false,
      "score": 20,
      "last_activity_date": 1495874977,
      "creation_date": 1495874977,
      "answer_id": 44214842,
      "question_id": 42736038,
      "content_license": "CC BY-SA 3.0",
      "body": "<p>This happend to me when the emulator froze and I had to kill the process. The signal icon always showed the small \"x\" as in the screenshot and no internet connection was successful.</p>\n\n<p>The only thing that helped was uninstalling and reinstalling the emulator (not the AVD images)</p>\n\n<p>In Android Studio:</p>\n\n<blockquote>\n  <p>Tools-> Android -> SDK Manager\n  Uncheck \"Android Emulator\" and let it uninstall then check again and let it install again.</p>\n</blockquote>\n\n<p><a href=\"https://i.stack.imgur.com/4XTcW.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/4XTcW.png\" alt=\"Screenshot\"></a></p>\n"
    },
    {
      "owner": {
        "account_id": 405484,
        "reputation": 33089,
        "user_id": 774398,
        "user_type": "registered",
        "accept_rate": 83,
        "profile_image": "https://www.gravatar.com/avatar/52ff4dddcaea4c2df64711c8e3d70e23?s=256&d=identicon&r=PG",
        "display_name": "Patrick",
        "link": "https://stackoverflow.com/users/774398/patrick"
      },
      "is_accepted": false,
      "score": 19,
      "last_activity_date": 1398200832,
      "last_edit_date": 1398200832,
      "creation_date": 1398200174,
      "answer_id": 23230033,
      "question_id": 22713128,
      "content_license": "CC BY-SA 3.0",
      "body": "<p>Use the <a href=\"http://developer.android.com/reference/android/app/FragmentTransaction.html#attach%28android.app.Fragment%29\" rel=\"noreferrer\">attach</a>/<a href=\"http://developer.android.com/reference/android/app/FragmentTransaction.html#detach%28android.app.Fragment%29\" rel=\"noreferrer\">detach</a> method with tags:</p>\n\n<p>Detach will destroy the view hirachy but keeps the state, like if on the backstack; this will let the \"not-visible\" fragment have a smaller memory footprint. But mind you that you need to correctly implement the fragment lifecycle (which you should do in the first place)</p>\n\n<blockquote>\n  <p>Detach the given fragment from the UI. This is the same state as when it is put on the back stack: the fragment is removed from the UI, however its state is still being actively managed by the fragment manager. When going into this state its view hierarchy is destroyed.</p>\n</blockquote>\n\n<p>The first time you add the fragment</p>\n\n<pre><code>FragmentTransaction t = getSupportFragmentManager().beginTransaction();\nt.add(android.R.id.content, new MyFragment(),MyFragment.class.getSimpleName());\nt.commit();\n</code></pre>\n\n<p>then you detach it</p>\n\n<pre><code>FragmentTransaction t = getSupportFragmentManager().beginTransaction();\nt.detach(MyFragment.class.getSimpleName());\nt.commit();\n</code></pre>\n\n<p>and attach it again if switched back, state will be kept</p>\n\n<pre><code>FragmentTransaction t = getSupportFragmentManager().beginTransaction();\nt.attach(getSupportFragmentManager().findFragmentByTag(MyFragment.class.getSimpleName()));\nt.commit();\n</code></pre>\n\n<p>But you always have to check if the fragment was added yet, if not then add it, else just attach it:</p>\n\n<pre><code>if (getSupportFragmentManager().findFragmentByTag(MyFragment.class.getSimpleName()) == null) {\n    FragmentTransaction t = getSupportFragmentManager().beginTransaction();\n    t.add(android.R.id.content, new MyFragment(), MyFragment.class.getSimpleName());\n    t.commit();\n} else {\n    FragmentTransaction t = getSupportFragmentManager().beginTransaction();\n    t.attach(getSupportFragmentManager().findFragmentByTag(MyFragment.class.getSimpleName()));\n    t.commit();\n}\n</code></pre>\n"
    }
  ],
  "has_more": true,
  "quota_max": 300,
  "quota_remaining": 298
}